{
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {
      "accountHeader": {
        "description": "Identifier of an AMC account entity associated with advertising campaigns. Use `GET` method on amc/accounts to fetch the AMC Account ID/Entity ID.",
        "in": "header",
        "name": "Amazon-Ads-AccountId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "advertiserHeader": {
        "description": "AMC Account ID",
        "in": "header",
        "name": "Amazon-Advertising-API-AdvertiserId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "clientHeader": {
        "description": "Identifier of a client associated with a 'Login with Amazon' account.",
        "in": "header",
        "name": "Amazon-Advertising-API-ClientId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "entityHeader": {
        "description": "Identifier of an entity associated with advertising campaigns. Use `GET` method on amc/accounts to fetch the AMC Account ID/Entity ID.",
        "in": "header",
        "name": "Amazon-Advertising-API-EntityId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "instanceIdHeader": {
        "description": "AMC Instance ID",
        "in": "header",
        "name": "Amazon-Marketing-Cloud-Audience-InstanceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "instanceIdQueryParameter": {
        "description": "AMC Instance ID",
        "in": "query",
        "name": "Amazon-Marketing-Cloud-InstanceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "marketplaceHeader": {
        "description": "Marketplace ID associated with the entity",
        "in": "header",
        "name": "Amazon-Advertising-API-MarketplaceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {},
    "responses": {
      "BadRequest": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/HttpResponse"
            }
          }
        },
        "description": "Bad Request"
      },
      "Forbidden": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/HttpResponse"
            }
          }
        },
        "description": "Forbidden"
      },
      "GatewayTimeout": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/HttpResponse"
            }
          }
        },
        "description": "Gateway Timeout"
      },
      "InternalServerError": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/HttpResponse"
            }
          }
        },
        "description": "Internal Server Error"
      },
      "MlDataExportCreateSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceCreateMlDataExportOutput"
            }
          }
        },
        "description": "MlDataExport creation metadata received from the process."
      },
      "MlDataExportGetSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetMlDataExportOutput"
            }
          }
        },
        "description": "Successfully get MlDataExport execution metadata for a given instanceId and modeledDatasetId."
      },
      "MlDataExportListSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceListMlDataExportOutput"
            }
          }
        },
        "description": "Successfully get a paginated list of MlDataExport metadata for a given instanceId."
      },
      "MlInputChannelCreateSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceCreateMlInputChannelOut"
            }
          }
        },
        "description": "MlInputChannel creation metadata received from the process."
      },
      "MlInputChannelDeleteSuccess": {
        "description": "Successfully deleted MlInputChannel with given mlInputChannelId."
      },
      "MlInputChannelGetSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelExecutionMetadata"
            }
          }
        },
        "description": "Get MlInputChannel execution metadata for a given instanceId and mlInputChannelId"
      },
      "MlInputChannelListSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelMetadataList"
            }
          }
        },
        "description": "Successfully get a paginated list of MlInputChannel metadata for a given instanceId."
      },
      "ModeledDatasetCreateSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceCreateModeledDatasetOutput"
            }
          }
        },
        "description": "ModeledDataset creation metadata received from the process."
      },
      "ModeledDatasetDeleteSuccess": {
        "description": "Successfully deleted ModeledDataset with given modeledDatasetId."
      },
      "ModeledDatasetGetSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetModeledDatasetOutput"
            }
          }
        },
        "description": "Successfully get ModeledDataset execution metadata for a given instanceId and modeledDatasetId."
      },
      "ModeledDatasetListSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceListModeledDatasetOutput"
            }
          }
        },
        "description": "Successfully get a paginated list of ModeledDataset metadata for a given instanceId."
      },
      "ModeledDatasetUploadJobCreateSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceCreateModeledDatasetUploadJobOutput"
            }
          }
        },
        "description": "ModeledDatasetUploadJob creation metadata received from the process."
      },
      "ModeledDatasetUploadJobGetSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetModeledDatasetUploadJobOutput"
            }
          }
        },
        "description": "Successfully get ModeledDatasetUploadJob execution metadata for a given instanceId and modeledDatasetUploadJobId."
      },
      "ModeledDatasetUploadJobListSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceListModeledDatasetUploadJobsOutput"
            }
          }
        },
        "description": "Successfully get a paginated list of ModeledDatasetUploadJob metadata for a given instanceId."
      },
      "NotFound": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/HttpResponse"
            }
          }
        },
        "description": "Not Found"
      },
      "TooManyRequests": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/HttpResponse"
            }
          }
        },
        "description": "Too Many Requests"
      },
      "TrainedModelCancelSuccess": {
        "description": "Successfully submitted TrainedModel cancellation request for given trainedModelId."
      },
      "TrainedModelCreateSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceCreateTrainedModelOutput"
            }
          }
        },
        "description": "TrainedModel creation metadata received from the process."
      },
      "TrainedModelDeleteSuccess": {
        "description": "Successfully deleted TrainedModel with given trainedModelId."
      },
      "TrainedModelGetSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetTrainedModelOutput"
            }
          }
        },
        "description": "Successfully get trainedModelId execution metadata for a given instanceId and trainedModelId."
      },
      "TrainedModelInferenceJobCreateSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelInferenceJobResponse"
            }
          }
        },
        "description": "TrainedModelInferenceJob creation metadata received from the process."
      },
      "TrainedModelInferenceJobDeleteSuccess": {
        "description": "Successfully canceled TrainedModelInferenceJob with given trainedModelInferenceJobId."
      },
      "TrainedModelInferenceJobGetSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetTrainedModelInferenceJobOutput"
            }
          }
        },
        "description": "Successfully get TrainedModelInferenceJob execution metadata for a given instanceId and trainedModelInferenceJobId."
      },
      "TrainedModelInferenceJobListSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceListTrainedModelInferenceJobOutput"
            }
          }
        },
        "description": "Successfully get a paginated list of TrainedModelInferenceJob metadata for a given instanceId."
      },
      "TrainedModelListSuccess": {
        "content": {
          "application/vnd.amcmodelbasedaudience.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceListTrainedModelsOutput"
            }
          }
        },
        "description": "Successfully get a paginated list of TrainedModel metadata for a given instanceId."
      }
    },
    "schemas": {
      "AMCLookalikeAudiencesActivateRequest": {
        "description": "Request to generate lookalike audience based on seed audience.",
        "properties": {
          "audienceDescription": {
            "description": "Customer provided description for audience.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "audienceSize": {
            "description": "Count of lookalike audiences to activate in ADSP. It can take values of '1M' to '20M' in 0.5M increments",
            "type": "string"
          },
          "refreshRateDays": {
            "description": "Customer's desired frequency for refreshing their audience in days.",
            "maximum": 21,
            "minimum": 7,
            "type": "integer"
          },
          "timeWindowRelative": {
            "default": false,
            "description": "If true, time window is moved for each refresh so that the query uses more recent data. Defaults to false.",
            "type": "boolean"
          }
        },
        "required": [
          "audienceExecutionId",
          "audienceName",
          "audienceSize",
          "refreshRateDays",
          "timeWindowRelative"
        ],
        "type": "object"
      },
      "AMCLookalikeAudiencesActivateResponse": {
        "description": "Response on a successful creation of a lookalike audience.",
        "properties": {
          "audienceExecutionDescription": {
            "description": "Message for successful process execution.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          }
        },
        "required": [
          "audienceExecutionDescription",
          "audienceExecutionId",
          "status"
        ],
        "type": "object"
      },
      "AMCLookalikeAudiencesCreateRequest": {
        "description": "Request to generate the seed audiences and relevancy scores.",
        "oneOf": [
          {
            "required": [
              "query"
            ]
          },
          {
            "required": [
              "workflowId"
            ]
          }
        ],
        "properties": {
          "advertiserId": {
            "description": "advertiserId to generate the lookalike audiences and relevancy scores for the appropriate audience",
            "type": "string"
          },
          "inputParameters": {
            "$ref": "#/components/schemas/QueryBasedAudienceInputParam"
          },
          "parameterValues": {
            "additionalProperties": {},
            "description": "Custom parameters specified in the query.",
            "example": {
              "asin": "ASIN1233"
            },
            "type": "object"
          },
          "query": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "workflowId": {
            "description": "Reference to an AMC workflow",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCLookalikeAudiencesCreateResponse": {
        "description": "Response on a successful generation of seed audiences, lookalike audiences, and relevancy scores.",
        "properties": {
          "audienceExecutionDescription": {
            "description": "Confirm seed audience creation workflow initiation.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          }
        },
        "required": [
          "audienceExecutionDescription",
          "audienceExecutionId",
          "status"
        ],
        "type": "object"
      },
      "AMCLookalikeAudiencesGetResponse": {
        "description": "Response on a successful GET of seed audiences and relevancy scores.",
        "properties": {
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "audienceSizeSubmittedToDsp": {
            "description": "Size of the seed audience.",
            "type": "string"
          },
          "canonicalId": {
            "description": "Canonical ID of the created audience in DSP.",
            "type": "string"
          },
          "dspAudienceId": {
            "description": "Audience ID of audience in DSP.",
            "type": "string"
          },
          "relevancyScores": {
            "description": "Array of relevancy scores.",
            "items": {
              "$ref": "#/components/schemas/RelevancyScore"
            },
            "maxItems": 200,
            "minItems": 19,
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          },
          "statusReason": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          },
          "workflowId": {
            "description": "Reference to an AMC workflow",
            "type": "string"
          }
        },
        "required": [
          "audienceExecutionId",
          "audienceSizeSubmittedToDSP",
          "canonicalId",
          "dspAudienceId",
          "relevancyScores",
          "status",
          "statusReason"
        ],
        "type": "object"
      },
      "AMCLookalikeAudiencesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AMCQueryBasedAudiencesRequest"
          },
          {
            "description": "Request for create lookalike audience.",
            "properties": {
              "lookalikeAudienceExpectedReach": {
                "description": "Preference of more broad versus more similar audiences. The available options are MOST_SIMILAR, SIMILAR, BALANCED, BROAD, or MOST_BROAD.",
                "type": "string"
              },
              "refreshRateDays": {
                "default": 21,
                "description": "Customer's desired frequency for refreshing their lookalike audience in days. For lookalike audiences only values from 7 to 21 are valid.",
                "maximum": 21,
                "minimum": 7,
                "type": "integer"
              }
            },
            "required": [
              "lookalikeAudienceExpectedReach"
            ],
            "type": "object"
          }
        ]
      },
      "AMCLookalikeAudiencesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AMCQueryBasedAudiencesResponse"
          },
          {
            "description": "Response for creating a lookalike audience.",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/AudienceExecutionState"
              }
            },
            "type": "object"
          }
        ]
      },
      "AMCModelBasedAudienceCMAAArn": {
        "description": "The ARN returned when the customer associates an algorithm with a membership.",
        "type": "string"
      },
      "AMCModelBasedAudienceConfiguredModelAlgorithmAssociations": {
        "description": "The ARN returned when the customer associates an algorithm with a membership.",
        "items": {
          "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn",
          "type": "string"
        },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "AMCModelBasedAudienceCreateMlDataExportInput": {
        "description": "Create MlDataExport input",
        "properties": {
          "dataType": {
            "description": "The data type that needs to be exported",
            "type": "string"
          },
          "inferenceJobId": {
            "description": "InferenceJobId to export data from",
            "type": "string"
          },
          "trainedModelId": {
            "description": "TrainedModelId to export data from",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceCreateMlDataExportOutput": {
        "description": "Response on a successful creation of a MlDAtaExport create.",
        "properties": {
          "mlDataExportId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlDataExportId"
          }
        },
        "required": [
          "mlDataExportId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateMlInputChannelInput": {
        "description": "Model based audience MlInputChannel create input",
        "properties": {
          "configuredModelAlgorithmAssociations": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceConfiguredModelAlgorithmAssociations"
          },
          "enforceUserLevelTargeting": {
            "description": "If the enforceUserLevelTargeting option is enabled, the system will ensure that the it  only uses data sources relevant for user level targeting.",
            "type": "boolean"
          },
          "idempotencyKey": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceIdempotencyKey"
          },
          "name": {
            "description": "The name of MlInputChannel.",
            "type": "string"
          },
          "queryParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceQueryParameters"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "name",
          "queryParameters"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateMlInputChannelOut": {
        "description": "Model based audience MlInputChannel create output",
        "properties": {
          "mlInputChannelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelId"
          }
        },
        "required": [
          "mlInputChannelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateModeledDatasetInput": {
        "description": "Create ModeledDataset input",
        "properties": {
          "description": {
            "description": "The description of the ModeledDataset",
            "type": "string"
          },
          "name": {
            "description": "The name of the ModeledDataset",
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetSchema"
          }
        },
        "required": [
          "name",
          "schema"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateModeledDatasetOutput": {
        "description": "Response on a successful creation of a ModeledDataset.",
        "properties": {
          "modeledDatasetId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetId"
          }
        },
        "required": [
          "modeledDatasetId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateModeledDatasetUploadJobInput": {
        "description": "CreateModeledDatasetUploadJobInput",
        "properties": {
          "inferenceJobIds": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelInferenceJobIds"
          },
          "modeledDatasetId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetId"
          },
          "trainedModelIds": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelIds"
          },
          "updateStrategy": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetUploadJobUpdateStrategy"
          }
        },
        "required": [
          "modeledDatasetId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateModeledDatasetUploadJobOutput": {
        "description": "Response on a successful creation of a ModeledDataset.",
        "properties": {
          "modeledDatasetUploadJobId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetUploadJobId"
          }
        },
        "required": [
          "modeledDatasetUploadJobId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateTrainedModelInput": {
        "description": "Model based audience trained model execution metadata information.",
        "properties": {
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "description": {
            "description": "Customer provided description for a trained model.",
            "type": "string"
          },
          "enforceUserLevelTargeting": {
            "description": "If the enforceUserLevelTargeting option is enabled, the system will ensure that the training process only uses data sources relevant for user level targeting.",
            "type": "boolean"
          },
          "environment": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceEnvironment"
          },
          "hyperParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceHyperParameters"
          },
          "idempotencyKey": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceIdempotencyKey"
          },
          "mlInputChannels": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannels"
          },
          "name": {
            "description": "Customer provided name for a trained model.",
            "type": "string"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceResourceConfig"
          },
          "stoppingCondition": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceStoppingCondition"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "name",
          "queryParameters"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceCreateTrainedModelOutput": {
        "description": "Response on a successful creation of a TrainedModel.",
        "properties": {
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          }
        },
        "required": [
          "trainedModelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceEnvironment": {
        "additionalProperties": {
          "maxLength": 512,
          "pattern": "^[\\S\\s]*$",
          "type": "string"
        },
        "description": "The environment variables to set in the Docker container.",
        "example": {
          "envVar1": "value1",
          "envVar2": "value2"
        },
        "maxProperties": 100,
        "minProperties": 0,
        "type": "object"
      },
      "AMCModelBasedAudienceGetMlDataExportOutput": {
        "description": "Model based audience MLDataExport metadata information.",
        "properties": {
          "createTime": {
            "description": "Timestamp of when the mlDataExport request was submitted. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "mlDataExportId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlDataExportId"
          },
          "preSignedErrorS3Uri": {
            "description": "Presigned S3 url to download the error file.",
            "type": "string"
          },
          "preSignedS3Uris": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlDataExportPresignedUrls"
          },
          "status": {
            "$ref": "#/components/schemas/MlDataExportStatus"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "validUntil": {
            "description": "Timestamp of when the mlDataExport request will be valid until. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "createTime",
          "mlDataExportId",
          "status"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceGetModeledDatasetOutput": {
        "description": "Model based audience trained model inference job execution metadata information.",
        "properties": {
          "createTime": {
            "description": "Timestamp of when the modeled dataset request was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of the ModeledDataset",
            "type": "string"
          },
          "modeledDatasetId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetId"
          },
          "name": {
            "description": "The name of the ModeledDataset",
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetSchema"
          },
          "status": {
            "$ref": "#/components/schemas/ModeledDatasetStatus"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          }
        },
        "required": [
          "createTime",
          "modeledDataSetId",
          "name",
          "schema",
          "status"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceGetModeledDatasetUploadJobOutput": {
        "description": "Model based audience trained model inference job execution metadata information.",
        "properties": {
          "estimatedRowCount": {
            "type": "integer"
          },
          "inferenceJobIds": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelInferenceJobIds"
          },
          "modeledDatasetId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetId"
          },
          "modeledDatasetUploadJobId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetUploadJobId"
          },
          "status": {
            "$ref": "#/components/schemas/ModeledDatasetUploadJobStatus"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "trainedModelIds": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelIds"
          },
          "updateStrategy": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetUploadJobUpdateStrategy"
          }
        },
        "required": [
          "estimatedRowCount",
          "modeledDataSetId",
          "modeledDatasetUploadJobId",
          "name",
          "status"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceGetTrainedModelInferenceJobOutput": {
        "description": "Model based audience trained model inference job execution metadata information.",
        "properties": {
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "containerExecutionParameters": {
            "$ref": "#/components/schemas/InferenceJobContainerExecutionParameters"
          },
          "createTime": {
            "description": "Timestamp of when the trained model request was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the trained model inference job",
            "type": "string"
          },
          "enforceUserLevelTargeting": {
            "description": "If the enforceUserLevelTargeting option is enabled, the system will ensure that the inference process only uses data sources relevant for user level targeting.",
            "type": "boolean"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "mlInputChannelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelId"
          },
          "name": {
            "description": "Name of the trained model inference job",
            "type": "string"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/InferenceJobResourceConfig"
          },
          "status": {
            "$ref": "#/components/schemas/TrainedModelInferenceJobStatus"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          },
          "trainedModelInferenceJobId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelInferenceJobId"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "instanceId",
          "mlInputChannelId",
          "status",
          "trainedModelId",
          "trainedModelInferenceJobId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceGetTrainedModelOutput": {
        "description": "Model based audience trained model execution metadata information.",
        "properties": {
          "audienceEligible": {
            "description": "Indicates if the TrainedModel can be used for audience generation.",
            "type": "boolean"
          },
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "createTime": {
            "description": "Timestamp of when the trained model request was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Customer provided description for a trained model.",
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceEnvironment"
          },
          "hyperParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceHyperParameters"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "mlInputChannels": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannels"
          },
          "name": {
            "description": "Customer provided name for a trained model.",
            "type": "string"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceResourceConfig"
          },
          "status": {
            "$ref": "#/components/schemas/TrainedModelStatus"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "stoppingCondition": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceStoppingCondition"
          },
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "createTime",
          "name",
          "queryParameters",
          "status",
          "trainedModelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceHyperParameters": {
        "additionalProperties": {
          "maxLength": 2500,
          "pattern": "^.*$",
          "type": "string"
        },
        "description": "Algorithm-specific parameters that influence the quality of the model.",
        "example": {
          "hyperParam1": "value1",
          "hyperParam2": "value2"
        },
        "maxProperties": 100,
        "minProperties": 0,
        "type": "object"
      },
      "AMCModelBasedAudienceIdempotencyKey": {
        "description": "Idempotency key to prevent duplicate records.",
        "type": "string"
      },
      "AMCModelBasedAudienceListMlDataExportOutput": {
        "properties": {
          "mlDataExportList": {
            "description": "A list of mlDataExport metadata",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetMlDataExportOutput"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceListModeledDatasetOutput": {
        "properties": {
          "modeledDatasetList": {
            "description": "A list of ModeledDataset metadata",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetModeledDatasetOutput"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceListModeledDatasetUploadJobsOutput": {
        "properties": {
          "modeledDatasetUploadJobList": {
            "description": "Paginated list of ModeledDatasetUploadJobs",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetModeledDatasetUploadJobOutput"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceListTrainedModelInferenceJobOutput": {
        "properties": {
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          },
          "trainedModelInferenceJobList": {
            "description": "List of the AMC model based audience trained model inference job for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetTrainedModelInferenceJobOutput"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceListTrainedModelsOutput": {
        "properties": {
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          },
          "trainedModelMetadataList": {
            "description": "List of the AMC model based audience trained models for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceGetTrainedModelOutput"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceMlDataExportId": {
        "description": "MlDataExportId",
        "type": "string"
      },
      "AMCModelBasedAudienceMlDataExportPresignedUrls": {
        "items": {
          "description": "Presigned S3 url to download the exported data from.",
          "type": "string"
        },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "AMCModelBasedAudienceMlInputChannel": {
        "description": "A named input source that the container will consume. This is the location of the output of the query.",
        "properties": {
          "channelName": {
            "maxLength": 64,
            "pattern": "^[A-Za-z0-9\\.\\-_]+$",
            "type": "string"
          },
          "mlInputChannelId": {
            "type": "string"
          }
        },
        "required": [
          "channelName",
          "mlInputChannelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceMlInputChannelExecutionMetadata": {
        "description": "MlInputChannelExecutionMetadata",
        "properties": {
          "approximateRecordCount": {
            "description": "The approximate record count.",
            "type": "string"
          },
          "approximateSizeOnDisk": {
            "description": "The approximate size of the data result on disk.",
            "type": "string"
          },
          "configuredModelAlgorithmAssociations": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceConfiguredModelAlgorithmAssociations"
          },
          "createTime": {
            "description": "Timestamp of when the trained model request was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "enforceUserLevelTargeting": {
            "description": "If the enforceUserLevelTargeting option is enabled, the system will ensure that the training process only uses data sources relevant for user level targeting.",
            "type": "boolean"
          },
          "expirationTimeInUtc": {
            "description": "The expiration time of MlInputChannel",
            "type": "string"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "isAudienceEligible": {
            "description": "Indicates if the data source can be used for audience generation.",
            "type": "boolean"
          },
          "mlInputChannelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelId"
          },
          "name": {
            "description": "The name for the ml input data.",
            "type": "string"
          },
          "numberOfFiles": {
            "description": "The number of files in the MlInputChannel.",
            "maximum": 1000000,
            "minimum": 0,
            "type": "integer"
          },
          "queryParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceQueryParameters"
          },
          "status": {
            "$ref": "#/components/schemas/MlInputChannelStatus"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociations",
          "createTime",
          "instanceId",
          "mlInputChannelId",
          "name",
          "queryParameters",
          "status"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceMlInputChannelId": {
        "description": "A unique ID that represents an AMCMlInputChannel object",
        "type": "string"
      },
      "AMCModelBasedAudienceMlInputChannelMetadataList": {
        "properties": {
          "mlInputChannelMetadataList": {
            "description": "A list of MlInputChannelMetadata",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelExecutionMetadata"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceMlInputChannels": {
        "description": "a list of mlInputChannels",
        "items": {
          "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannel"
        },
        "maxItems": 20,
        "minItems": 1,
        "type": "array"
      },
      "AMCModelBasedAudienceModeledDatasetId": {
        "description": "Identifier that uniquely represents an AMC model based audience modeled dataset",
        "type": "string"
      },
      "AMCModelBasedAudienceModeledDatasetSchema": {
        "description": "ModeledDataset schema",
        "properties": {
          "tableColumns": {
            "description": "a list of tableColumn",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceModeledDatasetTableColumn"
            },
            "maxItems": 50,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "tableColumns"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceModeledDatasetTableColumn": {
        "description": "Object to store tableColumn",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "dataType": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "userIdColumn": {
            "default": false,
            "description": "True for only one column. The one that contains ad user id. If true, dataType must be STRING. Optional, defaults to false.",
            "type": "boolean"
          }
        },
        "required": [
          "columnName",
          "dataType",
          "userIdColumn"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceModeledDatasetUploadJobId": {
        "description": "Identifier that uniquely represents an AMC model based audience modeled dataset upload job",
        "type": "string"
      },
      "AMCModelBasedAudienceModeledDatasetUploadJobUpdateStrategy": {
        "description": "UpdateStrategy of ModeledDatasetUploadJob",
        "enum": [
          "ADDITIVE",
          "FULL_REPLACE"
        ],
        "type": "string"
      },
      "AMCModelBasedAudienceQueryParameters": {
        "description": "Defines the AMC query to run against AMC data whose output will be used for model training.",
        "properties": {
          "amcQuery": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "inputParameters": {
            "$ref": "#/components/schemas/QueryBasedAudienceInputParam",
            "type": "object"
          },
          "parameterValues": {
            "additionalProperties": {},
            "description": "Custom parameters specified in the query.",
            "example": {
              "asin": "ASIN1233"
            },
            "type": "object"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "amcQuery",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceResourceConfig": {
        "description": "Configuration options for an training resource.",
        "properties": {
          "instanceCount": {
            "default": 1,
            "description": "instanceCount of training resource.",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "instanceType": {
            "$ref": "#/components/schemas/SagemakerInstanceType"
          },
          "volumeSizeInGb": {
            "description": "volumeSizeInGB of training resource.",
            "maximum": 8192,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceStoppingCondition": {
        "description": "Specifies a limit to how long a model training job can run.",
        "properties": {
          "maxRuntimeInSeconds": {
            "default": 86400,
            "description": "The maximum length of time, in seconds, that a model can train before it is stopped. Minimum value of 1",
            "maximum": 2419200,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelExecutionMetadata": {
        "description": "Model based audience trained model execution metadata information.",
        "properties": {
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "createTime": {
            "description": "Timestamp of when the trained model request was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "environment": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceEnvironment"
          },
          "hyperParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceHyperParameters"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "queryParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceQueryParameters"
          },
          "status": {
            "$ref": "#/components/schemas/ModelBasedTrainedModelState"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "stoppingCondition": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceStoppingCondition"
          },
          "trainedModelDescription": {
            "description": "Customer provided description for a trained model.",
            "type": "string"
          },
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          },
          "trainedModelName": {
            "description": "Customer provided name for a trained model.",
            "type": "string"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "createTime",
          "instanceId",
          "queryParameters",
          "status",
          "trainedModelId",
          "trainedModelName"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelExecutionMetadataSummary": {
        "description": "Model based audience trained model execution metadata information.",
        "properties": {
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "createTime": {
            "description": "Timestamp of when the trained model request was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ModelBasedTrainedModelState"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "trainedModelDescription": {
            "description": "Customer provided description for a trained model.",
            "type": "string"
          },
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          },
          "trainedModelName": {
            "description": "Customer provided name for a trained model.",
            "type": "string"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "createTime",
          "instanceId",
          "status",
          "trainedModelId",
          "trainedModelName"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelId": {
        "description": "Identifier that uniquely represents an AMC model based audience trained model.",
        "type": "string"
      },
      "AMCModelBasedAudienceTrainedModelIds": {
        "description": "A list of trainedModelIds",
        "items": {
          "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
        },
        "maxItems": 1,
        "minItems": 0,
        "type": "array"
      },
      "AMCModelBasedAudienceTrainedModelInferenceJobId": {
        "description": "A unique ID that represents a trained model inference job",
        "type": "string"
      },
      "AMCModelBasedAudienceTrainedModelInferenceJobIds": {
        "description": "A list of trainedModelInferenceJobIds",
        "items": {
          "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelInferenceJobId"
        },
        "maxItems": 1,
        "minItems": 0,
        "type": "array"
      },
      "AMCModelBasedAudienceTrainedModelInferenceJobRequest": {
        "description": "Model based audience TrainedModelInferenceJob execution metadata information.",
        "properties": {
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "containerExecutionParameters": {
            "$ref": "#/components/schemas/InferenceJobContainerExecutionParameters"
          },
          "description": {
            "description": "Description of the trained model inference job",
            "type": "string"
          },
          "enforceUserLevelTargeting": {
            "description": "If the enforceUserLevelTargeting option is enabled, the system will ensure that the inference process only uses data sources relevant for user level targeting.",
            "type": "boolean"
          },
          "environment": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceEnvironment"
          },
          "idempotencyKey": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceIdempotencyKey"
          },
          "mlInputChannelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceMlInputChannelId"
          },
          "name": {
            "description": "Name of the trained model inference job",
            "type": "string"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/InferenceJobResourceConfig"
          },
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          }
        },
        "required": [
          "enforceUserLevelTargeting",
          "mlInputChannelId",
          "name",
          "resourceConfig",
          "trainedModelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelInferenceJobResponse": {
        "description": "Model based audience trained model inference job execution metadata information.",
        "properties": {
          "trainedModelInferenceJobId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelInferenceJobId"
          }
        },
        "required": [
          "trainedModelInferenceJobId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelMetadataList": {
        "properties": {
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          },
          "trainedModelMetadataList": {
            "description": "List of all the AMC model based audience trained models for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelExecutionMetadataSummary"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelRequest": {
        "description": "Model based audience trained model execution metadata information.",
        "properties": {
          "configuredModelAlgorithmAssociationArn": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceCMAAArn"
          },
          "environment": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceEnvironment"
          },
          "hyperParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceHyperParameters"
          },
          "idempotencyKey": {
            "description": "Idempotency key to prevent duplicate records.",
            "type": "string"
          },
          "queryParameters": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceQueryParameters"
          },
          "stoppingCondition": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceStoppingCondition"
          },
          "trainedModelDescription": {
            "description": "Customer provided description for a trained model.",
            "type": "string"
          },
          "trainedModelName": {
            "description": "Customer provided name for a trained model.",
            "type": "string"
          }
        },
        "required": [
          "configuredModelAlgorithmAssociationArn",
          "queryParameters",
          "trainedModelName"
        ],
        "type": "object"
      },
      "AMCModelBasedAudienceTrainedModelResponse": {
        "description": "Response on a successful update of an audience.",
        "properties": {
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          }
        },
        "required": [
          "trainedModelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudiencesMetadata": {
        "description": "Model based audience execution metadata information.",
        "properties": {
          "advertiserId": {
            "description": "AdvertiserId to create and activate appropriate model based audience.",
            "type": "string"
          },
          "amcAudienceId": {
            "description": "Identifier that uniquely represents an AMC model based audience.",
            "type": "string"
          },
          "approximateAudienceSize": {
            "default": 0,
            "description": "Approximate number of audience members.",
            "minimum": 0,
            "type": "integer"
          },
          "audienceDescription": {
            "description": "Customer provided description for a model based audience.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for a model based audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "audienceType": {
            "$ref": "#/components/schemas/AudienceType"
          },
          "createTime": {
            "description": "Timestamp for the initial creation request. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "dspAudienceId": {
            "description": "Audience ID of audience in DSP.",
            "type": "string"
          },
          "dspCanonicalId": {
            "description": "Canonical ID of the created audience in DSP.",
            "type": "string"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ModelBasedAudienceState"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "trainedModelId": {
            "description": "Trained model ID of the trained model that created a user list for audience creation.",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp for the latest update of the resource. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "amcAudienceId",
          "audienceName",
          "audienceType",
          "createTime",
          "instanceId",
          "status",
          "trainedModelId",
          "updateTime"
        ],
        "type": "object"
      },
      "AMCModelBasedAudiencesMetadataList": {
        "properties": {
          "audienceMetadataList": {
            "description": "List of all the model based audiences for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCModelBasedAudiencesMetadataSummary"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCModelBasedAudiencesMetadataSummary": {
        "description": "Model based audience execution metadata information.",
        "properties": {
          "advertiserId": {
            "description": "AdvertiserId to create and activate appropriate model based audience.",
            "type": "string"
          },
          "amcAudienceId": {
            "description": "Identifier that uniquely represents an AMC model based audience.",
            "type": "string"
          },
          "audienceDescription": {
            "description": "Customer provided description for a model based audience.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for a model based audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "audienceType": {
            "$ref": "#/components/schemas/AudienceType"
          },
          "createTime": {
            "description": "Timestamp for the initial creation request. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "dspAudienceId": {
            "description": "Audience ID of audience in DSP.",
            "type": "string"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ModelBasedAudienceState"
          },
          "statusReason": {
            "description": "Description of why the execution is in FAILED state.",
            "type": "string"
          },
          "trainedModelId": {
            "description": "Trained model ID of the trained model that created a user list for audience creation.",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp for the latest update for the request. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "amcAudienceId",
          "audienceName",
          "audienceType",
          "createTime",
          "instanceId",
          "status",
          "trainedModelId",
          "updateTime"
        ],
        "type": "object"
      },
      "AMCModelBasedAudiencesRequest": {
        "description": "Request to create model based audience.",
        "properties": {
          "advertiserId": {
            "description": "Advertiser ID for which a model based audience is created and activated.",
            "type": "string"
          },
          "audienceDescription": {
            "description": "Customer provided description for a model based audience.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for a model based audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "idempotencyKey": {
            "description": "Idempotency key to prevent duplicate records.",
            "type": "string"
          },
          "trainedModelId": {
            "description": "Trained model ID of the trained model that created a user list for audience creation.",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "trainedModelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudiencesResponse": {
        "description": "Response on a successful model based audience creation.",
        "properties": {
          "amcAudienceId": {
            "description": "Identifier that uniquely represents an AMC model based audience.",
            "type": "string"
          }
        },
        "required": [
          "amcAudienceId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudiencesUpdateRequest": {
        "description": "Request to update an existing model based audience.",
        "properties": {
          "advertiserId": {
            "description": "Advertiser ID for which a model based audience is created and activated. This must be the same as the existing value.",
            "type": "string"
          },
          "audienceDescription": {
            "description": "Customer provided description for a model based audience. This must be the same as the existing value, and must be provided if and only if it currently exists.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for a model based audience. This has 'AMC ' prepended in DSP. This must be the same as the existing value. ",
            "type": "string"
          },
          "idempotencyKey": {
            "description": "Idempotency key to prevent duplicate records.",
            "type": "string"
          },
          "trainedModelId": {
            "$ref": "#/components/schemas/AMCModelBasedAudienceTrainedModelId"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "trainedModelId"
        ],
        "type": "object"
      },
      "AMCModelBasedAudiencesUpdateResponse": {
        "description": "Response on a successful update of an audience.",
        "properties": {
          "amcAudienceId": {
            "description": "Identifier that uniquely represents an AMC model based audience.",
            "type": "string"
          }
        },
        "required": [
          "amcAudienceId"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesExecutionMetadata": {
        "description": "Query based audience execution metadata information.",
        "properties": {
          "advertiserId": {
            "description": "AdvertiserId to create and activate appropriate audience.",
            "type": "string"
          },
          "audienceDescription": {
            "description": "Customer provided description for audience.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "createTime": {
            "description": "Timestamp for the first time query was submitted.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "dspAudienceId": {
            "description": "Audience ID of audience in DSP.",
            "type": "string"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "lastRefreshedTime": {
            "description": "Timestamp of the most recent refresh of the audiences created. Initially it is set to the timestamp of a successful audience creation.",
            "format": "date-time",
            "type": "string"
          },
          "query": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "refreshRateDays": {
            "default": 21,
            "description": "Customer's desired frequency for refreshing their audience in days.The rate could be set to 0 to force the audience to be deactivated after 30 days.",
            "maximum": 21,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          },
          "statusReason": {
            "description": "Description of why the audience is in its state.",
            "type": "string"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowRelative": {
            "default": false,
            "description": "If true, time window is moved for each refresh so that the query uses more recent data. Defaults to false.",
            "type": "boolean"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query.This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "createTime",
          "instanceId",
          "query",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesExecutionMetadataList": {
        "properties": {
          "executionMetadata": {
            "description": "List of all the executions for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadata"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCQueryBasedAudiencesExecutionMetadataListV11": {
        "properties": {
          "executionMetadata": {
            "description": "List of all the executions for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataV11"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCQueryBasedAudiencesExecutionMetadataListV12": {
        "properties": {
          "executionMetadata": {
            "description": "List of all the executions for a given instanceId.",
            "items": {
              "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataV12"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "nextToken": {
            "description": "Token to use in subsequent request to retrieve next page of results. Field will be null if all results have been returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AMCQueryBasedAudiencesExecutionMetadataV11": {
        "description": "Query based audience execution metadata information.",
        "properties": {
          "advertiserId": {
            "description": "Advertiser ID to create and activate appropriate audience.",
            "type": "string"
          },
          "audienceCount": {
            "default": 0,
            "description": "Approximate number of audience members.",
            "minimum": 0,
            "type": "integer"
          },
          "audienceDescription": {
            "description": "Customer provided description for audience.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "createTime": {
            "description": "Timestamp for the first time query was submitted. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "dspAudienceId": {
            "description": "Audience ID of audience in DSP.",
            "type": "string"
          },
          "dspCanonicalId": {
            "description": "Canonical ID of the created audience in DSP.",
            "type": "string"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "lastRefreshedTime": {
            "description": "Timestamp of the most recent refresh of the audiences created. Initially it is set to the timestamp of a successful audience creation.",
            "format": "date-time",
            "type": "string"
          },
          "query": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "refreshRateDays": {
            "default": 21,
            "description": "Customer's desired frequency for refreshing their audience in days. The rate could be set to 0 to force the audience to be deactivated after 30 days.",
            "maximum": 21,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          },
          "statusReason": {
            "description": "Description of why the audience is in its state.",
            "type": "string"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowRelative": {
            "default": false,
            "description": "If true, time window is moved for each refresh so that the query uses more recent data. Defaults to false.",
            "type": "boolean"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "createTime",
          "instanceId",
          "query",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesExecutionMetadataV12": {
        "description": "Query based audience execution metadata information.",
        "properties": {
          "advertiserId": {
            "description": "Advertiser ID to create and activate appropriate audience.",
            "type": "string"
          },
          "advertiserType": {
            "$ref": "#/components/schemas/AdvertiserType"
          },
          "audienceCount": {
            "default": 0,
            "description": "Approximate number of audience members.",
            "minimum": 0,
            "type": "integer"
          },
          "audienceDescription": {
            "description": "Customer provided description for audience.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "audienceType": {
            "description": "The type of the audience: RULE_BASED or LOOKALIKE.",
            "type": "string"
          },
          "createTime": {
            "description": "Timestamp for the first time query was submitted. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "dspAudienceId": {
            "description": "Audience ID of audience in DSP.",
            "type": "string"
          },
          "dspCanonicalId": {
            "description": "CanonicalId of the created audience in DSP.",
            "type": "string"
          },
          "inputParameters": {
            "$ref": "#/components/schemas/QueryBasedAudienceInputParam"
          },
          "instanceId": {
            "description": "AMC instance identifier.",
            "type": "string"
          },
          "lastRefreshedTime": {
            "description": "Timestamp of the most recent refresh of the audiences created. Initially it is set to the timestamp of a successful audience creation.",
            "format": "date-time",
            "type": "string"
          },
          "lookalikeAudienceExpectedReach": {
            "description": "Preference of more broad versus more similar audiences. The available options are MOST_SIMILAR, SIMILAR, BALANCED, BROAD, or MOST_BROAD.",
            "type": "string"
          },
          "no3pTrackers": {
            "default": true,
            "description": "Is this audience not allowed to use 3P tracking",
            "type": "boolean"
          },
          "parameterValues": {
            "additionalProperties": {},
            "description": "Custom parameters specified in the query.",
            "example": {
              "asin": "ASIN123"
            },
            "type": "object"
          },
          "query": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "refreshRateDays": {
            "default": 21,
            "description": "Customer's desired frequency for refreshing their audience in days. The rate could be set to 0 to force the audience to be deactivated after 30 days.",
            "maximum": 21,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          },
          "statusReason": {
            "description": "Description of why the audience is in its state.",
            "type": "string"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowRelative": {
            "default": false,
            "description": "If true, time window is moved for each refresh so that the query uses more recent data. Defaults to false.",
            "type": "boolean"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "workflowId": {
            "description": "Reference to an AMC workflow",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "createTime",
          "instanceId",
          "query",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesRequest": {
        "description": "Request for create audience.",
        "oneOf": [
          {
            "required": [
              "query"
            ]
          },
          {
            "required": [
              "workflowId"
            ]
          }
        ],
        "properties": {
          "advertiserId": {
            "description": "Advertiser ID for which an audience is created and activated.",
            "type": "string"
          },
          "audienceDescription": {
            "description": "Customer provided description for audience.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for audience. This has 'AMC ' prepended in DSP.",
            "type": "string"
          },
          "inputParameters": {
            "$ref": "#/components/schemas/QueryBasedAudienceInputParam"
          },
          "parameterValues": {
            "additionalProperties": {},
            "description": "Custom parameters specified in the query.",
            "example": {
              "asin": "ASIN1233"
            },
            "maxProperties": 100,
            "minProperties": 0,
            "type": "object"
          },
          "query": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "refreshRateDays": {
            "default": 21,
            "description": "Customer's desired frequency for refreshing their audience in days. The rate could be set to 0 to force the audience to be deactivated after 30 days.",
            "maximum": 21,
            "minimum": 0,
            "type": "integer"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowRelative": {
            "default": false,
            "description": "If true, the time window is moved for each refresh so that the query uses more recent data. Defaults to false.",
            "type": "boolean"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "workflowId": {
            "description": "Reference to an AMC workflow",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesResponse": {
        "description": "Response on a successful audience creation.",
        "properties": {
          "audienceExecutionDescription": {
            "description": "Human readable status message.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          }
        },
        "required": [
          "audienceExecutionDescription",
          "audienceExecutionId",
          "status"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesUpdateRequest": {
        "description": "Request to update an audience, replacing its configuration with the one provided. Some attributes are not modifiable at this time, but are required because they may become modifiable in the future.",
        "oneOf": [
          {
            "required": [
              "query"
            ]
          },
          {
            "required": [
              "workflowId"
            ]
          }
        ],
        "properties": {
          "advertiserId": {
            "description": "Advertiser ID for which an audience is created and activated. This must be the same as the existing value.",
            "type": "string"
          },
          "audienceDescription": {
            "description": "Customer provided description for audience. This must be the same as the existing value, and must be provided if and only if it currently exists.",
            "type": "string"
          },
          "audienceName": {
            "description": "Customer provided name for audience. This has 'AMC ' prepended in DSP. This must be the same as the existing value.",
            "type": "string"
          },
          "audienceType": {
            "description": "The type of the audience: RULE_BASED or LOOKALIKE. This must be the same as the existing value.",
            "type": "string"
          },
          "inputParameters": {
            "$ref": "#/components/schemas/QueryBasedAudienceInputParam"
          },
          "lookalikeAudienceExpectedReach": {
            "description": "Preference of more broad versus more similar Lookalike audiences. The available options are MOST_SIMILAR, SIMILAR, BALANCED, BROAD, or MOST_BROAD. This must be the same as the existing value.",
            "type": "string"
          },
          "parameterValues": {
            "additionalProperties": {},
            "description": "Custom parameters specified in the query.",
            "example": {
              "asin": "ASIN1233"
            },
            "type": "object"
          },
          "query": {
            "description": "Customer created query to run on AMC instance.",
            "type": "string"
          },
          "timeWindowEnd": {
            "description": "Ending date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "timeWindowRelative": {
            "default": false,
            "description": "If true, the time window is moved for each refresh so that the query uses more recent data. Defaults to false.",
            "type": "boolean"
          },
          "timeWindowStart": {
            "description": "Starting date of data to query. This field is in UTC and is formatted as yyyy-MM-dd'T'HH:mm:ss'Z'.",
            "format": "date-time",
            "type": "string"
          },
          "workflowId": {
            "description": "Reference to an AMC workflow",
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "audienceName",
          "audienceType",
          "timeWindowEnd",
          "timeWindowStart"
        ],
        "type": "object"
      },
      "AMCQueryBasedAudiencesUpdateResponse": {
        "description": "Response on a successful update of an audience.",
        "properties": {
          "audienceExecutionDescription": {
            "description": "Human readable status message.",
            "type": "string"
          },
          "audienceExecutionId": {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/QueryBasedAudienceExecutionState"
          }
        },
        "required": [
          "audienceExecutionDescription",
          "audienceExecutionId",
          "status"
        ],
        "type": "object"
      },
      "AdvertiserType": {
        "description": "Enum containing all possible advertiser types.",
        "enum": [
          "DISPLAY",
          "SPONSORED_ADS"
        ],
        "type": "string"
      },
      "AudienceError": {
        "description": "Error response object.",
        "properties": {
          "code": {
            "description": "HTTP status code of the response.",
            "type": "string"
          },
          "details": {
            "description": "Human-readable description of the response.",
            "type": "string"
          },
          "requestId": {
            "description": "Value created by Amazon API Gateway that uniquely identifies your request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AudienceExecutionState": {
        "description": "Enum containing all possible audience execution states.",
        "enum": [
          "DEACTIVATED",
          "FAILED",
          "PENDING",
          "RUNNING",
          "SUCCEEDED"
        ],
        "type": "string"
      },
      "AudienceExecutionStateV2": {
        "description": "Enum containing all possible audience states.",
        "enum": [
          "FAILED",
          "IN_PROGRESS",
          "SUBMITTED",
          "SUCCEEDED"
        ],
        "type": "string"
      },
      "AudienceType": {
        "description": "Enum containing all possible audience types.",
        "enum": [
          "LOOKALIKE",
          "MODEL_BASED",
          "RULE_BASED"
        ],
        "type": "string"
      },
      "ComplexDataType": {
        "oneOf": [
          {
            "properties": {
              "elementDataType": {
                "$ref": "#/components/schemas/DataTypes"
              },
              "elementNullable": {
                "type": "boolean"
              },
              "type": {
                "enum": [
                  "ARRAY"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "precision": {
                "nullable": true,
                "type": "integer"
              },
              "type": {
                "enum": [
                  "DECIMAL"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "keyDataType": {
                "$ref": "#/components/schemas/DataTypes",
                "nullable": true
              },
              "type": {
                "enum": [
                  "MAP"
                ],
                "type": "string"
              },
              "valueDataType": {
                "$ref": "#/components/schemas/DataTypes",
                "nullable": true
              },
              "valueNullable": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "fields": {
                "items": {
                  "properties": {
                    "dataType": {
                      "$ref": "#/components/schemas/DataTypes"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "maxItems": 100,
                "minItems": 0,
                "type": "array"
              },
              "type": {
                "enum": [
                  "STRUCT"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "DataTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SimpleDataType"
          },
          {
            "$ref": "#/components/schemas/ComplexDataType"
          }
        ]
      },
      "Error": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessage"
          }
        },
        "type": "object"
      },
      "ErrorCode": {
        "description": "Error code",
        "type": "string"
      },
      "ErrorMessage": {
        "description": "Human readable response message",
        "type": "string"
      },
      "HttpResponse": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessage"
          }
        }
      },
      "HttpStatusCode": {
        "description": "Corresponding HTTP Status code",
        "type": "string"
      },
      "InferenceJobContainerExecutionParameters": {
        "description": "Container execution parameters for an inference job.",
        "properties": {
          "maxPayloadInMb": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InferenceJobResourceConfig": {
        "description": "Configuration options for an inference resource.",
        "properties": {
          "instanceCount": {
            "default": 1,
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "instanceType": {
            "$ref": "#/components/schemas/SagemakerInstanceType"
          }
        },
        "type": "object"
      },
      "LookalikeAudienceErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceError"
          }
        ]
      },
      "LookalikeAudienceExecutionState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceExecutionState"
          }
        ]
      },
      "LookalikeAudienceSize": {
        "description": "Object that stores the absolute audience size.",
        "properties": {
          "absolute": {
            "description": "Object that stores the absolute audience size.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "MlDataExportStatus": {
        "description": "Enum containing all possible MlDataExport status.",
        "enum": [
          "CREATE_FAILED",
          "CREATE_IN_PROGRESS",
          "CREATE_SUCCEEDED"
        ],
        "type": "string"
      },
      "MlInputChannelStatus": {
        "description": "Enum containing all possible MlInputChannel status.",
        "enum": [
          "ACTIVE",
          "CREATE_FAILED",
          "CREATE_IN_PROGRESS",
          "DELETE_FAILED",
          "DELETE_IN_PROGRESS",
          "INACTIVE"
        ],
        "type": "string"
      },
      "ModelBasedAudienceErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceError"
          }
        ]
      },
      "ModelBasedAudienceState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceExecutionStateV2"
          }
        ]
      },
      "ModelBasedAudienceTrainedModelErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceError"
          }
        ]
      },
      "ModelBasedTrainedModelState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrainedModelExecutionState"
          }
        ]
      },
      "ModeledDatasetStatus": {
        "description": "Enum containing all possible ModeledDataset status.",
        "enum": [
          "ACTIVE",
          "CREATE_FAILED",
          "CREATE_IN_PROGRESS",
          "DELETE_FAILED",
          "DELETE_IN_PROGRESS",
          "INACTIVE"
        ],
        "type": "string"
      },
      "ModeledDatasetUploadJobStatus": {
        "description": "Enum containing all possible ModeledDatasetUploadJob status.",
        "enum": [
          "ACTIVE",
          "CREATE_FAILED",
          "CREATE_IN_PROGRESS",
          "INACTIVE"
        ],
        "type": "string"
      },
      "QueryBasedAudienceErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceError"
          }
        ]
      },
      "QueryBasedAudienceExecutionState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AudienceExecutionState"
          }
        ]
      },
      "QueryBasedAudienceInputParam": {
        "description": "\"Optional. Defines the parameters that can be referenced by workflow.\ndefinition. If workflow references a parameter not defined here the compilation\nfails.\"\n",
        "items": {
          "example": {
            "columnType": [
              "DIMENSION",
              "METRIC"
            ],
            "dataType": [
              "STRING",
              "BINARY",
              "BOOLEAN",
              "BYTE",
              "CALENDAR_INTERVAL",
              "DATE",
              "DECIMAL",
              "DOUBLE",
              "FLOAT",
              "LONG",
              "INTEGER",
              "TIMESTAMP",
              "SHORT",
              {
                "elementDataType": "STRING",
                "isElementNullable": true,
                "type": "ARRAY"
              }
            ],
            "defaultValue": [
              "asin123"
            ],
            "description": [
              "This parameter contains asinId."
            ],
            "name": [
              "asin"
            ]
          },
          "properties": {
            "columnType": {
              "description": "Type of the column corresponding to the parameter.",
              "enum": [
                "DIMENSION",
                "METRIC"
              ],
              "type": "string"
            },
            "dataType": {
              "description": "Data type of the parameter corresponding to the data type of a column.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleDataType"
                },
                {
                  "$ref": "#/components/schemas/ComplexDataType"
                }
              ]
            },
            "defaultValue": {
              "description": "Value to assign to the parameter if no value is provided.",
              "type": "string"
            },
            "description": {
              "description": "Human-readable description of what the parameter is used for.",
              "type": "string"
            },
            "name": {
              "description": "Name of the parameter.",
              "type": "string"
            }
          },
          "required": [
            "dataType",
            "name"
          ],
          "type": "object"
        },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "RelevancyScore": {
        "description": "Object to store relevancy scores.",
        "properties": {
          "audienceSize": {
            "$ref": "#/components/schemas/LookalikeAudienceSize"
          },
          "score": {
            "description": "Relevancy score for a lookalike audience.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SagemakerInstanceType": {
        "description": "InstanceType of ResourceConfig.",
        "type": "string"
      },
      "SimpleDataType": {
        "type": "string"
      },
      "TrainedModelExecutionState": {
        "description": "Enum containing all possible trained model execution states.",
        "enum": [
          "FAILED",
          "IN_PROGRESS",
          "SUBMITTED",
          "SUCCEEDED"
        ],
        "type": "string"
      },
      "TrainedModelInferenceJobStatus": {
        "description": "Enum containing all possible TrainedModelInferenceJob status.",
        "enum": [
          "ACTIVE",
          "CANCEL_FAILED",
          "CANCEL_IN_PROGRESS",
          "CREATE_FAILED",
          "CREATE_IN_PROGRESS",
          "INACTIVE"
        ],
        "type": "string"
      },
      "TrainedModelStatus": {
        "description": "Enum containing all possible TrainedModel status.",
        "enum": [
          "ACTIVE",
          "CREATE_FAILED",
          "CREATE_IN_PROGRESS",
          "DELETE_FAILED",
          "DELETE_IN_PROGRESS",
          "INACTIVE"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "description": "Create query based audience execution metadata to activate in DSP.",
    "title": "Rule-Based Audiences",
    "version": "3.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/amc/audiences/lookalike": {
      "post": {
        "description": "Creates a lookalike audience execution metadata. This operation starts the execution workflow to generate lookalike audience and activate it in DSP. This is an idempotent operation.",
        "operationId": "createLookalikeAudience",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/entityHeader"
          },
          {
            "$ref": "#/components/parameters/instanceIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.amcquerybasedaudience.v1+json": {
              "schema": {
                "$ref": "#/components/schemas/AMCLookalikeAudiencesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.amclookalikeaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCLookalikeAudiencesResponse"
                }
              }
            },
            "description": "Audience creation metadata received from process."
          },
          "400": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/LookalikeAudienceErrorResponse"
                }
              }
            },
            "description": "Invalid input arguments passed."
          },
          "429": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/LookalikeAudienceErrorResponse"
                }
              }
            },
            "description": "Too many requests on this operation, try again after some time."
          },
          "500": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/LookalikeAudienceErrorResponse"
                }
              }
            },
            "description": "Unknown service exception while processing the request."
          }
        },
        "summary": "Creates lookalike audience execution metadata information.",
        "tags": [
          "Rule-based audience lookalike"
        ]
      }
    },
    "/amc/audiences/query": {
      "get": {
        "description": "Returns list of execution metadata information for a given instanceId.",
        "operationId": "getAllQueryBasedAudiencesByInstanceId",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/entityHeader"
          },
          {
            "$ref": "#/components/parameters/instanceIdHeader"
          },
          {
            "description": "Optional. Limits the number of items to return in the response. Max value is 100. Defaults to 100.",
            "in": "query",
            "name": "maxResults",
            "schema": {
              "default": 100,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Optional. Token to retrieve subsequent page of results.",
            "in": "query",
            "name": "nextToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataList"
                }
              },
              "application/vnd.amcquerybasedaudience.v1.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataListV11"
                }
              },
              "application/vnd.amcquerybasedaudience.v1.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataListV12"
                }
              }
            },
            "description": "Successfully get all execution metadata for a given instanceId."
          },
          "400": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Invalid input arguments passed."
          },
          "404": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "No resource found for a given instanceId."
          }
        },
        "summary": "Get all query based audiences execution metadata.",
        "tags": [
          "Rule-based audience"
        ]
      },
      "post": {
        "description": "Creates a query based audience execution metadata. This operation starts the execution workflow to create audience and activate it in DSP. This is an idempotent operation.",
        "operationId": "createQueryBasedAudience",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/entityHeader"
          },
          {
            "$ref": "#/components/parameters/instanceIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.amcquerybasedaudience.v1+json": {
              "schema": {
                "$ref": "#/components/schemas/AMCQueryBasedAudiencesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesResponse"
                }
              }
            },
            "description": "Audience creation metadata received from process."
          },
          "400": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Invalid input arguments passed."
          },
          "429": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Too many requests on this operation, try again after some time."
          },
          "500": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Unknown service exception while processing the request."
          }
        },
        "summary": "Creates query based audience execution metadata information.",
        "tags": [
          "Rule-based audience"
        ]
      }
    },
    "/amc/audiences/query/{audienceExecutionId}": {
      "delete": {
        "description": "Deletes an audience for a given instanceId and audienceExecutionId. Only FAILED audiences may be deleted at this time.",
        "operationId": "deleteQueryBasedAudienceByAudienceExecutionId",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/entityHeader"
          },
          {
            "$ref": "#/components/parameters/instanceIdHeader"
          },
          {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "in": "path",
            "name": "audienceExecutionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted audience with given audienceExecutionId."
          },
          "400": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Invalid input arguments passed."
          },
          "404": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "No resource found for a given audienceExecutionId."
          }
        },
        "summary": "Delete query based audience execution metadata for a given audienceExecutionId.",
        "tags": [
          "Rule-based audience"
        ]
      },
      "get": {
        "description": "Returns execution metadata information for a given instanceId and audienceExecutionId.",
        "operationId": "getQueryBasedAudienceByAudienceExecutionId",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/entityHeader"
          },
          {
            "$ref": "#/components/parameters/instanceIdHeader"
          },
          {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "in": "path",
            "name": "audienceExecutionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadata"
                }
              },
              "application/vnd.amcquerybasedaudience.v1.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataV11"
                }
              },
              "application/vnd.amcquerybasedaudience.v1.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesExecutionMetadataV12"
                }
              }
            },
            "description": "Get execution metadata for a given instanceId and audienceExecutionId."
          },
          "400": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Invalid input arguments passed."
          },
          "404": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "No resource found for a given instanceId."
          }
        },
        "summary": "Get query based audience execution metadata for a given audienceExecutionId.",
        "tags": [
          "Rule-based audience"
        ]
      },
      "put": {
        "description": "Updates audience configuration for a given audienceExecutionId. This will replace the configuration of the audience, resetting any non-provided attributes to default values. Only FAILED audiences may be updated at this time.",
        "operationId": "updateQueryBasedAudienceByAudienceExecutionId",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/entityHeader"
          },
          {
            "$ref": "#/components/parameters/instanceIdHeader"
          },
          {
            "description": "Identifier that uniquely represents an AMCQueryBasedAudiencesExecutionMetadata.",
            "in": "path",
            "name": "audienceExecutionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.amcquerybasedaudience.v1+json": {
              "schema": {
                "$ref": "#/components/schemas/AMCQueryBasedAudiencesUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/AMCQueryBasedAudiencesUpdateResponse"
                }
              }
            },
            "description": "Update audience metadata received from process."
          },
          "400": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Invalid input arguments passed."
          },
          "401": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "401 Unauthorized."
          },
          "403": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "User does not have sufficient access to perform this action."
          },
          "429": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Too many requests on this operation, try again after some time."
          },
          "500": {
            "content": {
              "application/vnd.amcquerybasedaudience.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBasedAudienceErrorResponse"
                }
              }
            },
            "description": "Unknown service exception while processing the request."
          }
        },
        "summary": "Update query based audience execution metadata for a given audienceExecutionId.",
        "tags": [
          "Rule-based audience"
        ]
      }
    }
  }
}