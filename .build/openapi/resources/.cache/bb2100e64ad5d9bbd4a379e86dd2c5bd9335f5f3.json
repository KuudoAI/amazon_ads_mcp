{
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {
      "HexgateBadRequestV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad request"
      },
      "HexgateForbiddenV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Forbidden. The request failed because the user does not have access to the specified resource."
      },
      "HexgateInternalServerErrorV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved."
      },
      "HexgateNotFoundV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Not Found. The requested resource does not exist or is not visible for the user."
      },
      "HexgatePreconditionFailedV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The input provided does not meet the required constraints for this operation to be performed successfully."
      },
      "HexgateTooManyRequestsV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Too Many Requests. The request was rate-limited. Retry later."
      },
      "HexgateUnauthorizedV1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation."
      }
    },
    "schemas": {
      "BidModifierType": {
        "description": "Type of bid modifier for geo-attribute set within a smart-location.",
        "enum": [
          "EXCLUSION",
          "INCLUSION"
        ],
        "type": "string"
      },
      "Coordinates": {
        "description": "The latitude and longitude coordinates of the center of radius location.",
        "properties": {
          "latitude": {
            "description": "latitude coordinate. example 47.6157",
            "format": "float",
            "type": "number"
          },
          "longitude": {
            "description": "longitude coordinate. example 122.339",
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "CreateGeoLocationsInput": {
        "description": "The payload to pass to createGeoLocations operation.",
        "properties": {
          "advertiserId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "geoLocations": {
            "$ref": "#/components/schemas/GeoLocationsConfig"
          },
          "parentEntityId": {
            "type": "string"
          }
        },
        "required": [
          "advertiserId",
          "customerId",
          "entityId",
          "geoLocations"
        ],
        "type": "object"
      },
      "CreateGeoLocationsOutput": {
        "description": "The response from createGeoLocations operation.",
        "properties": {
          "geoLocationIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "geoLocationIds"
        ],
        "type": "object"
      },
      "CreateSmartLocationBidAdjustmentInput": {
        "description": "The payload to pass to createSmartLocationBidAdjustment operation.",
        "properties": {
          "adGroupId": {
            "description": "The ID of the ad group for which to create the bid adjustment.",
            "type": "string"
          }
        },
        "required": [
          "adGroupId"
        ],
        "type": "object"
      },
      "CreateSmartLocationBidAdjustmentOutput": {
        "description": "The response from createSmartLocationBidAdjustment operation.",
        "properties": {
          "success": {
            "description": "Indicates whether the bid adjustment was created successfully.",
            "type": "boolean"
          }
        },
        "required": [
          "success"
        ],
        "type": "object"
      },
      "DistanceUnit": {
        "description": "The distance unit to be used for radius location.",
        "enum": [
          "KILOMETERS",
          "MILES"
        ],
        "type": "string"
      },
      "DspGeoLocationCategoryV1": {
        "description": "The geographic location category.",
        "enum": [
          "ARRONDISSEMENT",
          "BEZIRK",
          "CITY",
          "COUNTRY",
          "COUNTY",
          "DEPARTMENT",
          "DISTRICT",
          "DMA",
          "KREIS",
          "POSTAL_CODE",
          "PREFECTURE",
          "PROVINCE",
          "REGION",
          "STATE"
        ],
        "type": "string"
      },
      "DspGeoLocationExtendedV1": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/DspGeoLocationCategoryV1"
          },
          "countryCode": {
            "description": "The geographic location country code.",
            "type": "string"
          },
          "id": {
            "description": "The geographic location identifier.",
            "type": "string"
          },
          "label": {
            "description": "The geographic location label.",
            "type": "string"
          },
          "name": {
            "description": "The geographic location name.",
            "type": "string"
          },
          "rodeoRegionCode": {
            "description": "Rodeo region code.",
            "type": "string"
          },
          "state": {
            "description": "The geographic location state.",
            "type": "string"
          },
          "targetCodeGroup": {
            "items": {
              "description": "A list of the target code groups such as 'US-101' that should be targeted to target the location.",
              "maxItems": 200,
              "minItems": 1,
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DspGeoLocationV1": {
        "properties": {
          "category": {
            "description": "The geographic location category.",
            "enum": [
              "CITY",
              "COUNTRY",
              "COUNTY",
              "DEPARTMENT",
              "DMA",
              "POSTAL_CODE",
              "PREFECTURE",
              "PROVINCE",
              "STATE"
            ],
            "type": "string"
          },
          "id": {
            "description": "The geographic location identifier.",
            "type": "string"
          },
          "name": {
            "description": "The geographic location name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DspGeoLocationsExtendedV1": {
        "description": "List of the geoLocations.",
        "properties": {
          "geoLocations": {
            "items": {
              "$ref": "#/components/schemas/DspGeoLocationExtendedV1"
            },
            "type": "array"
          },
          "invalidGeoLocationIds": {
            "description": "List of invalid geoLocationIds passed as input. Populated when specifying PARTIAL error handling strategy.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nextToken": {
            "description": "Token used in following requests for pagination.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DspGeoLocationsV1": {
        "description": "List of the geoLocations.",
        "properties": {
          "geoLocations": {
            "items": {
              "$ref": "#/components/schemas/DspGeoLocationV1"
            },
            "type": "array"
          },
          "nextToken": {
            "description": "Token used in following requests for pagination.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "The error response object.",
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/SubError"
            },
            "maxItems": 10,
            "type": "array"
          },
          "message": {
            "description": "A human-readable description of the response.",
            "type": "string"
          },
          "requestId": {
            "description": "Request Id that uniquely identifies your request.",
            "type": "string"
          }
        }
      },
      "ErrorHandlingType": {
        "description": "Specify the error handling strategy and whether to return partial responses in case of validation or functional error. The options are 'STRICT' and 'PARTIAL'. 'STRICT' will fail fast when an error is encountered. 'PARTIAL' will attempt to return a partial response and surface erroneous input parameters.",
        "enum": [
          "PARTIAL",
          "STRICT"
        ],
        "type": "string"
      },
      "GeoLocationsConfig": {
        "description": "The config of geo locations to be created by createGeoLocations operation.",
        "properties": {
          "radiusLocations": {
            "$ref": "#/components/schemas/RadiusLocationList"
          },
          "smartLocations": {
            "$ref": "#/components/schemas/SmartLocationList"
          }
        },
        "type": "object"
      },
      "GetIndicesOutput": {
        "description": "The response from getIndices operation.",
        "properties": {
          "indices": {
            "items": {
              "$ref": "#/components/schemas/IndexMetadata"
            },
            "type": "array"
          },
          "nextToken": {
            "description": "Token used in following requests for pagination.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IndexData": {
        "description": "Data point in an index.",
        "properties": {
          "indexValue": {
            "description": "Index value for the region.",
            "format": "double",
            "type": "number"
          },
          "regionId": {
            "description": "Region identifier (e.g., H3 cell ID).",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RegionType"
          }
        },
        "required": [
          "indexValue",
          "regionId",
          "type"
        ],
        "type": "object"
      },
      "IndexMetadata": {
        "description": "Metadata for an index.",
        "properties": {
          "category": {
            "description": "Category of the index.",
            "type": "string"
          },
          "createdDate": {
            "description": "Date when the index was created.",
            "type": "string"
          },
          "indexData": {
            "items": {
              "$ref": "#/components/schemas/IndexData"
            },
            "type": "array"
          },
          "indexDescription": {
            "description": "Description of the index.",
            "type": "string"
          },
          "indexId": {
            "description": "The unique identifier for the index.",
            "type": "string"
          },
          "indexName": {
            "description": "The name of the index.",
            "type": "string"
          },
          "indexType": {
            "description": "Type of the index.",
            "type": "string"
          },
          "modifiedDate": {
            "description": "Date when the index was last modified.",
            "type": "string"
          }
        },
        "required": [
          "indexId",
          "indexName"
        ],
        "type": "object"
      },
      "ListLocationsRequestBodyV1": {
        "description": "Resulting locations will match all specified filters",
        "properties": {
          "filters": {
            "items": {
              "$ref": "#/components/schemas/LocationFilterV1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LocationCategoryV1": {
        "description": "The location category.",
        "enum": [
          "CITY",
          "COUNTRY",
          "DMA",
          "POSTAL_CODE",
          "STATE"
        ],
        "type": "string"
      },
      "LocationFilterV1": {
        "properties": {
          "field": {
            "description": "Field to filter by. Supported enums are 'locationId', 'name', and 'category'. The 'name' filter is a fuzzy search. If 'category' is specified, the values must match either 'CITY', 'STATE', 'DMA', 'COUNTRY', or 'POSTAL_CODE'.",
            "enum": [
              "category",
              "locationId",
              "name"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LocationIdV1": {
        "description": "The identifier of the location.",
        "type": "string"
      },
      "LocationV1": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/LocationCategoryV1"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationIdV1"
          },
          "name": {
            "description": "The location name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RadiusLocation": {
        "description": "Specifies the radius location to be created by createGeoLocations operation.",
        "properties": {
          "poiAddress": {
            "description": "Address such as '2111 7th Ave, Seattle, WA 98121, United States' or landmark text as 'Amazon Spheres'",
            "type": "string"
          },
          "poiCoordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "radius": {
            "description": "radius of circle in kilometers or miles",
            "format": "float",
            "type": "number"
          },
          "units": {
            "$ref": "#/components/schemas/DistanceUnit"
          }
        },
        "required": [
          "radius",
          "units"
        ],
        "type": "object"
      },
      "RadiusLocationList": {
        "description": "The list of radius locations to be created by createGeoLocations operation. Currently limited to only 1 location.",
        "items": {
          "$ref": "#/components/schemas/RadiusLocation"
        },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "RegionType": {
        "description": "Type of region in index data.",
        "enum": [
          "H3"
        ],
        "type": "string"
      },
      "SmartLocation": {
        "description": "Specifies the smart location to be created by createGeoLocations operation.",
        "properties": {
          "bidModifierConfig": {
            "$ref": "#/components/schemas/SmartLocationBidModifierConfig"
          },
          "indexId": {
            "description": "The ID of the index to use for this smart location",
            "type": "string"
          },
          "name": {
            "description": "Optional name for the smart location",
            "type": "string"
          }
        },
        "required": [
          "bidModifierConfig",
          "indexId"
        ],
        "type": "object"
      },
      "SmartLocationBidModifier": {
        "description": "Configuration for a bid modifier in a smart location.",
        "properties": {
          "bidModifierVal": {
            "description": "Bid modifier value",
            "format": "double",
            "type": "number"
          },
          "maxPercentile": {
            "description": "Maximum percentile value (0-100)",
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          },
          "minPercentile": {
            "description": "Minimum percentile value (0-100)",
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          },
          "modifierType": {
            "$ref": "#/components/schemas/BidModifierType"
          }
        },
        "required": [
          "bidModifierVal",
          "maxPercentile",
          "minPercentile",
          "modifierType"
        ],
        "type": "object"
      },
      "SmartLocationBidModifierConfig": {
        "description": "List of bid modifiers for the smart location.",
        "items": {
          "$ref": "#/components/schemas/SmartLocationBidModifier"
        },
        "type": "array"
      },
      "SmartLocationList": {
        "description": "The list of smart locations to be created by createGeoLocations operation. Currently limited to only 1 location.",
        "items": {
          "$ref": "#/components/schemas/SmartLocation"
        },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "SubError": {
        "description": "The sub error object.",
        "properties": {
          "errorType": {
            "type": "string"
          },
          "fieldName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "errorType",
          "message"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "title": "Locations",
    "version": "3.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/locations/list": {
      "post": {
        "description": "Note: This endpoint is currently limited to US only. Gets a list of location objects after filtering on at least one of **locationId**, **name**, **category**. Each item in the resulting set will match all specified filters.\n\n\n**Requires one of these permissions**:\n[]",
        "operationId": "listLocations",
        "parameters": [
          {
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sets the number of locations in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,2000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch the next 20 items.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": {
              "default": "10",
              "maximum": 2000,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListLocationsRequestBodyV1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of locations.",
                  "properties": {
                    "locations": {
                      "items": {
                        "$ref": "#/components/schemas/LocationV1"
                      },
                      "type": "array"
                    },
                    "nextToken": {
                      "description": "Token used in following requests for pagination.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful operation."
          },
          "400": {
            "$ref": "#/components/responses/HexgateBadRequestV1"
          },
          "401": {
            "$ref": "#/components/responses/HexgateUnauthorizedV1"
          },
          "403": {
            "$ref": "#/components/responses/HexgateForbiddenV1"
          },
          "404": {
            "$ref": "#/components/responses/HexgateNotFoundV1"
          },
          "412": {
            "$ref": "#/components/responses/HexgatePreconditionFailedV1"
          },
          "429": {
            "$ref": "#/components/responses/HexgateTooManyRequestsV1"
          },
          "500": {
            "$ref": "#/components/responses/HexgateInternalServerErrorV1"
          }
        },
        "summary": "Gets location objects based on one or more filters.",
        "tags": [
          "Locations"
        ]
      }
    }
  }
}