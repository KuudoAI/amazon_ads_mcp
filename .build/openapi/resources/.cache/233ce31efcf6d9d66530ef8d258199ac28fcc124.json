{
  "components": {
    "examples": {
      "StoreSpotlightCampaignListExample": {
        "summary": "A list of campaign cases containing store spotlight case",
        "value": [
          {
            "adFormat": "storeSpotlight",
            "bidAdjustments": [
              {
                "bidAdjustmentPercent": 900,
                "bidAdjustmentPredicate": "placementGroupHome"
              },
              {
                "bidAdjustmentPercent": 200,
                "bidAdjustmentPredicate": "placementGroupDetailPage"
              },
              {
                "bidAdjustmentPercent": -50,
                "bidAdjustmentPredicate": "placementGroupOther"
              }
            ],
            "bidMultiplier": 0,
            "bidOptimization": true,
            "brandEntityId": "string",
            "budget": 0,
            "budgetType": "lifetime",
            "campaignId": 0,
            "creative": {
              "asins": [],
              "brandLogoAssetID": "string",
              "brandLogoCrop": {
                "height": 0,
                "left": 0,
                "top": 0,
                "width": 0
              },
              "brandName": "string",
              "headline": "string",
              "subpages": [
                {
                  "asin": "string",
                  "pageTitle": "string",
                  "url": "string"
                },
                {
                  "asin": "string",
                  "pageTitle": "string",
                  "url": "string"
                },
                {
                  "asin": "string",
                  "pageTitle": "string",
                  "url": "string"
                }
              ],
              "type": "storeSpotlight"
            },
            "endDate": "string",
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "name": "string",
            "portfolioId": 0,
            "servingStatus": "asinNotBuyable",
            "startDate": "string",
            "state": "enabled",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            }
          },
          {
            "adFormat": "authorCollection",
            "brandEntityId": "string",
            "budget": 0,
            "budgetType": "lifetime",
            "campaignId": 0,
            "creative": {
              "asins": [
                "string"
              ],
              "type": "video",
              "videoMediaIds": [
                "string"
              ]
            },
            "endDate": "string",
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "name": "string",
            "portfolioId": 0,
            "servingStatus": "asinNotBuyable",
            "startDate": "string",
            "state": "enabled",
            "supplySource": "AMAZON",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            }
          }
        ]
      },
      "StoreSpotlightDraftListExample": {
        "summary": "A list of draft cases containing store spotlight case",
        "value": [
          {
            "adFormat": "storeSpotlight",
            "adGroupIds": [
              0
            ],
            "bidMultiplier": 99,
            "bidOptimization": true,
            "brandEntityId": "string",
            "budget": 0,
            "budgetType": "lifetime",
            "creative": {
              "asins": [],
              "brandLogoAssetID": "string",
              "brandLogoCrop": {
                "height": 0,
                "left": 0,
                "top": 0,
                "width": 0
              },
              "brandName": "string",
              "headline": "string",
              "subpages": [
                {
                  "asin": "string",
                  "pageTitle": "string",
                  "url": "string"
                },
                {
                  "asin": "string",
                  "pageTitle": "string",
                  "url": "string"
                },
                {
                  "asin": "string",
                  "pageTitle": "string",
                  "url": "string"
                }
              ],
              "type": "storeSpotlight"
            },
            "draftCampaignId": 0,
            "endDate": "string",
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "name": "string",
            "portfolioId": 0,
            "startDate": "string",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            }
          },
          {
            "adFormat": "authorCollection",
            "brandEntityId": "string",
            "budget": 0,
            "budgetType": "lifetime",
            "creative": {
              "asins": [
                "string"
              ],
              "type": "video",
              "videoMediaIds": [
                "string"
              ]
            },
            "draftCampaignId": 0,
            "endDate": "string",
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "name": "string",
            "portfolioId": 0,
            "startDate": "string",
            "supplySource": "AMAZON",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            }
          }
        ]
      },
      "StoreSpotlightSingleCampaignExample": {
        "summary": "An example of store spotlight campaign case",
        "value": {
          "adFormat": "storeSpotlight",
          "bidAdjustments": [
            {
              "bidAdjustmentPercent": 900,
              "bidAdjustmentPredicate": "placementGroupHome"
            },
            {
              "bidAdjustmentPercent": 200,
              "bidAdjustmentPredicate": "placementGroupDetailPage"
            },
            {
              "bidAdjustmentPercent": -50,
              "bidAdjustmentPredicate": "placementGroupOther"
            }
          ],
          "bidMultiplier": 0,
          "bidOptimization": true,
          "brandEntityId": "string",
          "budget": 0,
          "budgetType": "lifetime",
          "campaignId": 0,
          "creative": {
            "asins": [],
            "brandLogoAssetID": "string",
            "brandLogoCrop": {
              "height": 0,
              "left": 0,
              "top": 0,
              "width": 0
            },
            "brandName": "string",
            "headline": "string",
            "subpages": [
              {
                "asin": "string",
                "pageTitle": "string",
                "url": "string"
              },
              {
                "asin": "string",
                "pageTitle": "string",
                "url": "string"
              },
              {
                "asin": "string",
                "pageTitle": "string",
                "url": "string"
              }
            ],
            "type": "storeSpotlight"
          },
          "endDate": "string",
          "landingPage": {
            "pageType": "string",
            "url": "string"
          },
          "name": "string",
          "portfolioId": 0,
          "servingStatus": "asinNotBuyable",
          "startDate": "string",
          "state": "enabled",
          "tags": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          }
        }
      },
      "StoreSpotlightSingleDraftExample": {
        "summary": "An example of store spotlight draft case",
        "value": {
          "adFormat": "storeSpotlight",
          "adGroupIds": [
            0
          ],
          "bidMultiplier": 99,
          "bidOptimization": true,
          "brandEntityId": "string",
          "budget": 0,
          "budgetType": "lifetime",
          "creative": {
            "asins": [],
            "brandLogoAssetID": "string",
            "brandLogoCrop": {
              "height": 0,
              "left": 0,
              "top": 0,
              "width": 0
            },
            "brandName": "string",
            "headline": "string",
            "subpages": [
              {
                "asin": "string",
                "pageTitle": "string",
                "url": "string"
              },
              {
                "asin": "string",
                "pageTitle": "string",
                "url": "string"
              },
              {
                "asin": "string",
                "pageTitle": "string",
                "url": "string"
              }
            ],
            "type": "storeSpotlight"
          },
          "draftCampaignId": 0,
          "endDate": "string",
          "keywords": [
            {
              "adGroupId": 0,
              "bid": 0,
              "campaignId": 0,
              "keywordId": 0,
              "keywordText": "string",
              "matchType": "broad",
              "state": "draft"
            }
          ],
          "landingPage": {
            "pageType": "string",
            "url": "string"
          },
          "name": "string",
          "negativeKeywords": [
            {
              "adGroupId": 0,
              "campaignId": 0,
              "keywordId": 0,
              "keywordText": "string",
              "matchType": "negativeExact",
              "state": "draft"
            }
          ],
          "portfolioId": 0,
          "startDate": "string",
          "tags": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          }
        }
      }
    },
    "parameters": {
      "accountIdHeaderOptional": {
        "description": "The identifier of an account. The account must be a global advertising account..",
        "in": "header",
        "name": "Amazon-Ads-AccountId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "clientHeader": {
        "description": "The identifier of a client associated with a **Login with Amazon** account.",
        "in": "header",
        "name": "Amazon-Advertising-API-ClientId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "profileHeader": {
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
        "in": "header",
        "name": "Amazon-Advertising-API-Scope",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "profileHeaderOptional": {
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
        "in": "header",
        "name": "Amazon-Advertising-API-Scope",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "400BadRequest": {
        "content": {
          "application/vnd.sberror.v3.0+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad request."
      },
      "404NotFound": {
        "content": {
          "application/vnd.sberror.v3.0+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The requested resource was not found."
      }
    },
    "schemas": {
      "AdFormat": {
        "description": "The type of ad format.",
        "enum": [
          "productCollection",
          "video"
        ],
        "type": "string"
      },
      "AdFormatError": {
        "properties": {
          "AdFormatError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "AdFormatV3_2": {
        "description": "The type of ad format.",
        "enum": [
          "productCollection",
          "storeSpotlight",
          "video"
        ],
        "type": "string"
      },
      "AdGroupError": {
        "properties": {
          "AdGroupError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "AssetsError": {
        "properties": {
          "AssetsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "AuthorizationError": {
        "properties": {
          "AuthorizationError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "BasicErrorObject": {
        "properties": {
          "location": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "reason"
        ],
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "Bid": {
        "description": "The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).",
        "type": "number"
      },
      "BidAdjustment": {
        "properties": {
          "bidAdjustmentPercent": {
            "description": "Bid adjustment for placement group. Value is a percentage to two decimal places. Example: If this is set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 900,
            "minimum": -99,
            "type": "number"
          },
          "bidAdjustmentPredicate": {
            "description": "The enum for placement group name",
            "enum": [
              "placementGroupDetailPage",
              "placementGroupHome",
              "placementGroupOther"
            ],
            "type": "string"
          }
        },
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "BidAdjustmentV3_3": {
        "properties": {
          "bidAdjustmentPercent": {
            "description": "Bid adjustment for placement groups and shopper segments. Value is a percentage to two decimal places. For bid adjustments in placement groups, min is -99.00 and max is 900.00. For bid adjustments in shopper segments, min is 0.00 and max is 900.00. For example: If -40.00 is set for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 900,
            "minimum": -99,
            "type": "number"
          },
          "bidAdjustmentPredicate": {
            "description": "Determines the predicate (placement groups and shopper segments) that the bid adjustment will be made for.\n|BidAdjustmentPredicate|Description|\n|------|-----------|\n|PLACEMENT_GROUP_DETAIL_PAGE|Predicate for adjusting bids at detail page placement.|\n|PLACEMENT_GROUP_HOME|Predicate for adjusting bids at home page placement.|\n|PLACEMENT_GROUP_OTHER|Predicate for adjusting bids at pages other than detail and home pages placement.|\n|SHOPPER_SEGMENT_NEW_TO_BRAND_PURCHASE|Predicate for adjusting bids for new-to-brand purchase shopper segment.|",
            "enum": [
              "placementGroupDetailPage",
              "placementGroupHome",
              "placementGroupOther",
              "shopperSegmentNewToBrandPurchase"
            ],
            "type": "string"
          }
        }
      },
      "BidError": {
        "properties": {
          "BidError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "lowerLimit": {
                    "type": "string"
                  },
                  "upperLimit": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "BidOptimizationStrategy": {
        "description": "Automated bid optimization strategy.\n|Bid optimization strategy|Description|\n|------|-----------|\n|MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|\n|MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|\n`Not supported for video campaigns`",
        "enum": [
          "MAXIMIZE_IMMEDIATE_SALES",
          "MAXIMIZE_NEW_TO_BRAND_CUSTOMERS"
        ],
        "type": "string"
      },
      "BrandType": {
        "description": "| brandType | description |\n|-----------|-------------|\n| brandRegistry | The brand is in the brand registry. |\n| bookAuthor    | The brand is a book author. |",
        "enum": [
          "brandRegistry",
          "bookAuthor"
        ],
        "type": "string"
      },
      "BrandsError": {
        "properties": {
          "BrandsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "BudgetError": {
        "properties": {
          "BudgetError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "budgetType": {
                    "type": "string"
                  },
                  "maxBudget": {
                    "type": "string"
                  },
                  "minBudget": {
                    "type": "string"
                  },
                  "precision": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "BudgetType": {
        "description": "Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.",
        "enum": [
          "lifetime",
          "daily"
        ],
        "type": "string"
      },
      "CampaignError": {
        "properties": {
          "CampaignError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "invalidCharacters": {
                    "type": "string"
                  },
                  "maxCampaigns": {
                    "type": "string"
                  },
                  "maxLength": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "supportedStates": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "CampaignTags": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.",
        "example": {
          "PONumber": "examplePONumber",
          "accountManager": "exampleAccountManager"
        },
        "type": "object"
      },
      "CreativeError": {
        "properties": {
          "CreativeError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "actualType": {
                    "type": "string"
                  },
                  "asins": {
                    "type": "string"
                  },
                  "aspectRatio": {
                    "type": "string"
                  },
                  "cropField": {
                    "type": "string"
                  },
                  "cropHeight": {
                    "type": "string"
                  },
                  "cropWidth": {
                    "type": "string"
                  },
                  "emoji": {
                    "type": "string"
                  },
                  "expectedType": {
                    "type": "string"
                  },
                  "imageHeight": {
                    "type": "string"
                  },
                  "imageWidth": {
                    "type": "string"
                  },
                  "invalidCharacters": {
                    "type": "string"
                  },
                  "left": {
                    "type": "string"
                  },
                  "maxLength": {
                    "type": "string"
                  },
                  "maxSize": {
                    "type": "string"
                  },
                  "min": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "requiredAspectRatio": {
                    "type": "string"
                  },
                  "top": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "CreativeType": {
        "description": "collection is deprecated in favor of productCollection.",
        "enum": [
          "productCollection",
          "video"
        ],
        "type": "string"
      },
      "DraftsError": {
        "properties": {
          "DraftsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "EndDate": {
        "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.",
        "nullable": true,
        "pattern": "^\\d{8}$",
        "type": "string"
      },
      "Error": {
        "properties": {
          "code": {
            "readOnly": true,
            "type": "string"
          },
          "details": {
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "ErrorEntry": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AdFormatError"
          },
          {
            "$ref": "#/components/schemas/AdGroupError"
          },
          {
            "$ref": "#/components/schemas/AssetsError"
          },
          {
            "$ref": "#/components/schemas/AuthorizationError"
          },
          {
            "$ref": "#/components/schemas/BidError"
          },
          {
            "$ref": "#/components/schemas/BrandsError"
          },
          {
            "$ref": "#/components/schemas/BudgetError"
          },
          {
            "$ref": "#/components/schemas/CampaignError"
          },
          {
            "$ref": "#/components/schemas/CreativeError"
          },
          {
            "$ref": "#/components/schemas/DraftsError"
          },
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "$ref": "#/components/schemas/FilterError"
          },
          {
            "$ref": "#/components/schemas/KDPError"
          },
          {
            "$ref": "#/components/schemas/KeywordError"
          },
          {
            "$ref": "#/components/schemas/LandingPageError"
          },
          {
            "$ref": "#/components/schemas/MarketplaceError"
          },
          {
            "$ref": "#/components/schemas/PageAsinsError"
          },
          {
            "$ref": "#/components/schemas/PaginationError"
          },
          {
            "$ref": "#/components/schemas/ProductItemsError"
          },
          {
            "$ref": "#/components/schemas/ProfileError"
          },
          {
            "$ref": "#/components/schemas/RecommendationError"
          },
          {
            "$ref": "#/components/schemas/SpooferError"
          },
          {
            "$ref": "#/components/schemas/TargetError"
          }
        ],
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "Expression": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SBAPIProductPredicateType"
          },
          "value": {
            "description": "The text of the targeting expression. The - token defines a range. For example, 2-4 defines a range of 2, 3, and 4.",
            "type": "string"
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "FilterError": {
        "properties": {
          "FilterError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "Goal": {
        "description": "The goal type of the campaign.\nIf no goal is selected then it will default to `PAGE_VISIT`.\n| goal | description |\n|-----------|-------------|\n| BRAND_IMPRESSION_SHARE | Brand Impression Share (BIS) is Top of search (ToS) impression shares for branded search terms. |\n| PAGE_VISIT | Facilitate consumers' awareness of your brand |\n| ACQUIRE_NEW_CUSTOMERS | This property is a PREVIEW ONLY and cannot be used as part of a request or response, this note will be removed once supported. This goal drives new customer acquisition for your brands. |\n| AD_VIEWS | This property is a PREVIEW ONLY and cannot be used as part of a request or response, this note will be removed once supported. This goal maximizes view for your ads. |",
        "type": "string"
      },
      "KDPError": {
        "properties": {
          "KDPError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "Keyword": {
        "properties": {
          "bid": {
            "$ref": "#/components/schemas/SBAPIBid"
          },
          "keywordText": {
            "description": "The keyword text. Maximum of 10 words.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/SBMatchType"
          },
          "nativeLanguageKeyword": {
            "description": "The unlocalized keyword text in the preferred locale of the advertiser.",
            "type": "string"
          },
          "nativeLanguageLocale": {
            "description": "The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeywordEntry": {
        "properties": {
          "bid": {
            "$ref": "#/components/schemas/SBAPIBid"
          },
          "expressions": {
            "description": "An array of targets associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/Expression"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "KeywordError": {
        "properties": {
          "KeywordError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "bid": {
                    "type": "string"
                  },
                  "keywordText": {
                    "type": "string"
                  },
                  "matchType": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "LandingPageError": {
        "properties": {
          "LandingPageError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "actual": {
                    "type": "string"
                  },
                  "expected": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "ListRecommendationsRequest": {
        "properties": {
          "maxResults": {
            "$ref": "#/components/schemas/MaxResultsRecommendations"
          },
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          }
        }
      },
      "ListRequest": {
        "properties": {
          "maxResults": {
            "$ref": "#/components/schemas/MaxResults"
          },
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          }
        }
      },
      "ListResponse": {
        "properties": {
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          }
        }
      },
      "MarketplaceError": {
        "properties": {
          "MarketplaceError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "MatchType": {
        "description": "The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "broad",
          "exact",
          "phrase"
        ],
        "type": "string"
      },
      "MaxResults": {
        "description": "Sets a limit on the number of results returned by an operation.",
        "maximum": 5000,
        "minimum": 1,
        "type": "integer"
      },
      "MaxResultsRecommendations": {
        "description": "Sets a limit on the number of results returned by an operation.",
        "maximum": 100,
        "minimum": 1,
        "type": "integer"
      },
      "MediaId": {
        "description": "The Media identifier.",
        "type": "string"
      },
      "MediaPublisherAPIError": {
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MediaStatus": {
        "description": "Media status:\n * `Processing` - The media is being processed\n * `PendingDeepValidation` - The media is pending additional validation carried out during media conversion.\n * `Available` - Media has successfully finished validation and conversion and the media is published.\n * `Failed` - Media processing failed\n",
        "enum": [
          "Processing",
          "PendingDeepValidation",
          "Available",
          "Failed"
        ],
        "type": "string"
      },
      "MediaType": {
        "description": "The supported media types.",
        "enum": [
          "brandLogo",
          "image"
        ],
        "type": "string"
      },
      "NegativeKeyword": {
        "properties": {
          "keywordText": {
            "description": "The keyword text. Maximum of 10 words.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/SBNegativeMatchType"
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "NegativeMatchType": {
        "description": "The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "negativeExact",
          "negativePhrase"
        ],
        "type": "string"
      },
      "NegativeState": {
        "enum": [
          "enabled",
          "archived"
        ],
        "type": "string"
      },
      "NextToken": {
        "description": "Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.",
        "maxLength": 2048,
        "minLength": 1,
        "type": "string"
      },
      "PageAsinsError": {
        "properties": {
          "PageAsinsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "pageUrl": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "PaginationError": {
        "properties": {
          "PaginationError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "expected": {
                    "type": "string"
                  },
                  "upperLimit": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "ProductItemsError": {
        "properties": {
          "ProductItemsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "ProductPredicateType": {
        "enum": [
          "asinCategorySameAs",
          "asinBrandSameAs",
          "asinPriceLessThan",
          "asinPriceBetween",
          "asinPriceGreaterThan",
          "asinReviewRatingLessThan",
          "asinReviewRatingBetween",
          "asinReviewRatingGreaterThan",
          "asinSameAs"
        ],
        "type": "string"
      },
      "ProfileError": {
        "properties": {
          "ProfileError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "Program": {
        "description": "The Ad Program that the media will be attached to. Currently, we support `SponsoredBrands` with creative type `Video`",
        "properties": {
          "creativeType": {
            "enum": [
              "Video"
            ],
            "type": "string"
          },
          "programType": {
            "enum": [
              "SponsoredBrands"
            ],
            "type": "string"
          }
        },
        "required": [
          "creativeType",
          "programType"
        ],
        "type": "object"
      },
      "RecommendationError": {
        "properties": {
          "RecommendationError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "maxCount": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "RecommendedBid": {
        "properties": {
          "rangeEnd": {
            "format": "double",
            "type": "number"
          },
          "rangeStart": {
            "format": "double",
            "type": "number"
          },
          "recommended": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SBAPIBid": {
        "description": "The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).",
        "format": "double",
        "type": "number",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBAPIProductPredicateType": {
        "enum": [
          "asinCategorySameAs",
          "asinBrandSameAs",
          "asinPriceLessThan",
          "asinPriceBetween",
          "asinPriceGreaterThan",
          "asinReviewRatingLessThan",
          "asinReviewRatingBetween",
          "asinReviewRatingGreaterThan",
          "asinSameAs"
        ],
        "type": "string",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBAdGroup": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[listAdGroups](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Ad_Groups)| GET /sb/adGroups|\n|[getAdGroup](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Ad_Groups)| GET /sb/adGroups/{adGroupId}|\n<br/>",
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the ad group.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "description": "The name of the ad group.",
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "SBAdGroupId": {
        "description": "The ad group identifier.",
        "format": "int64",
        "type": "integer"
      },
      "SBBidRecommendationKeyword": {
        "properties": {
          "keywordText": {
            "description": "The text of the keyword. Maximum of 10 words.",
            "minLength": 1,
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType",
            "description": "MatchType should be non-null and non-empty"
          }
        },
        "type": "object"
      },
      "SBBidRecommendationKeywordIndex": {
        "description": "Correlates the keyword to the keyword array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBBidRecommendationTargetsIndex": {
        "description": "Correlates the target to the targets array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBBidRecommendationThemeIndex": {
        "description": "Correlates the theme targets to the theme targets array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBBrandLogoCrop": {
        "description": "The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.",
        "properties": {
          "height": {
            "description": "The number of pixels to crop down from the value specified as `top`",
            "type": "integer"
          },
          "left": {
            "description": "The leftmost pixel from which to begin cropping",
            "type": "integer"
          },
          "top": {
            "description": "The highest pixel from which to begin cropping",
            "type": "integer"
          },
          "width": {
            "description": "The number of pixels to crop rightwards from the value specified as `left`",
            "type": "integer"
          }
        }
      },
      "SBBrandResponse": {
        "properties": {
          "id": {
            "description": "The Brand identifier.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The Brand name.",
            "type": "string"
          }
        }
      },
      "SBBudgetRulesRecommendationError": {
        "description": "The Error Response Object.",
        "properties": {
          "code": {
            "description": "The HTTP status code of the response.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBBudgetRulesRecommendationEvent": {
        "properties": {
          "endDate": {
            "description": "The end date in YYYYMMDD format.",
            "type": "string"
          },
          "eventId": {
            "description": "The event identifier.",
            "type": "string"
          },
          "eventName": {
            "description": "The event name.",
            "type": "string"
          },
          "startDate": {
            "description": "The start date in YYYYMMDD format.",
            "type": "string"
          },
          "suggestedBudgetIncreasePercent": {
            "description": "The suggested budget increase expressed as a percent.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SBBudgetRulesRecommendationEventRequest": {
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "type": "string"
          }
        },
        "required": [
          "campaignId"
        ],
        "type": "object"
      },
      "SBBudgetRulesRecommendationEventResponse": {
        "description": "Special events with date range and suggested budget increase.",
        "properties": {
          "recommendedBudgetRuleEvents": {
            "description": "A list of recommended special events with date range and suggested budget increase.",
            "items": {
              "$ref": "#/components/schemas/SBBudgetRulesRecommendationEvent"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SBCampaign": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[createCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| POST /sb/campaigns|\n|[getCampaign](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| GET /sb/campaigns/{campaignId}|\n<br/>",
        "properties": {
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "campaignId": {
            "description": "The campaign identifier.",
            "readOnly": true,
            "type": "integer"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "endDate": {
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "keywords": {
            "$ref": "#/components/schemas/SBCreateCampaignPositiveKeyword"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          },
          "name": {
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.",
            "type": "string"
          },
          "negativeKeywords": {
            "$ref": "#/components/schemas/SBCreateCampaignNegativeKeyword"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "servingStatus": {
            "description": "|Value|Description|\n|-----|-----------|\n|asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|\n|billingError| The billing information associated with the account requires correction.|\n|ended| The value specified in the `endDate` field is in the past.|\n|landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|outOfBudget| The campaign has run out of budget.|\n|paused|The campaign state is set to `paused`.|\n|pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.\n|ready| The campaign is scheduled for a future date.|\n|rejected| The campaign failed moderation review.|\n|running| The campaign is enabled and serving.|\n|scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|terminated| The state of the campaign is set to `archived`.|\n<br/>",
            "enum": [
              "asinNotBuyable",
              "billingError",
              "ended",
              "landingPageNotAvailable",
              "outOfBudget",
              "paused",
              "pendingReview",
              "ready",
              "rejected",
              "running",
              "scheduled",
              "terminated"
            ],
            "readOnly": true,
            "type": "string"
          },
          "startDate": {
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBCampaignBase": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "campaignId": {
            "description": "The campaign identifier.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "name": {
            "$ref": "#/components/schemas/SBCampaignName"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "servingStatus": {
            "description": "|Status|Description|\n|------|-----------|\n|ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|\n|BILLING_ERROR| Billing information requires correction.|\n|ENDED| THe `endDate` specified in the campaign object occurs in the past.|\n|LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|OUT_OF_BUDGET| The campaign has run out of budget.|\n|PAUSED| The campaign state set to `paused`.|\n|PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|\n|READY| The campaign is scheduled for a future date.|\n|REJECTED| The campaign failed moderation review.|\n|RUNNING| The campaign is enabled and serving.|\n|SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|TERMINATED|The state of the campaign is set to `archived`.|",
            "enum": [
              "ASIN_NOT_BUYABLE",
              "BILLING_ERROR",
              "ENDED",
              "LANDING_PAGE_NOT_AVAILABLE",
              "OUT_OF_BUDGET",
              "PAUSED",
              "PENDING_REVIEW",
              "READY",
              "REJECTED",
              "RUNNING",
              "SCHEDULED",
              "TERMINATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "readOnly": true
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBCampaignBase32": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormatV3_2"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "campaignId": {
            "description": "The campaign identifier.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "name": {
            "$ref": "#/components/schemas/SBCampaignName"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "servingStatus": {
            "description": "|Status|Description|\n|------|-----------|\n|ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|\n|BILLING_ERROR| Billing information requires correction.|\n|ENDED| THe `endDate` specified in the campaign object occurs in the past.|\n|LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|OUT_OF_BUDGET| The campaign has run out of budget.|\n|PAUSED| The campaign state set to `paused`.|\n|PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|\n|READY| The campaign is scheduled for a future date.|\n|REJECTED| The campaign failed moderation review.|\n|RUNNING| The campaign is enabled and serving.|\n|SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|TERMINATED|The state of the campaign is set to `archived`.|",
            "enum": [
              "ASIN_NOT_BUYABLE",
              "BILLING_ERROR",
              "ENDED",
              "LANDING_PAGE_NOT_AVAILABLE",
              "OUT_OF_BUDGET",
              "PAUSED",
              "PENDING_REVIEW",
              "READY",
              "REJECTED",
              "RUNNING",
              "SCHEDULED",
              "TERMINATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "readOnly": true
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBCampaignName": {
        "description": "The campaign name.",
        "maxLength": 128,
        "minLength": 1,
        "type": "string"
      },
      "SBCampaignResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCampaignResponseCommon"
          },
          {
            "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
          }
        ]
      },
      "SBCampaignResponseCommon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "properties": {
              "bidAdjustments": {
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                },
                "type": "array"
              },
              "bidMultiplier": {
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "maximum": 99.0,
                "minimum": -99.0,
                "type": "number"
              },
              "bidOptimization": {
                "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
                "type": "boolean"
              },
              "creative": {
                "$ref": "#/components/schemas/SBCollectionCreative"
              },
              "landingPage": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductListLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBCustomUrlLandingPage"
                  }
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "SBCampaignResponseCommon32": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase32"
          },
          {
            "properties": {
              "bidAdjustments": {
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                },
                "type": "array"
              },
              "bidMultiplier": {
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "maximum": 99.0,
                "minimum": -99.0,
                "type": "number"
              },
              "bidOptimization": {
                "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
                "type": "boolean"
              },
              "creative": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductCollectionCreative"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreSpotlightCreative"
                  }
                ]
              },
              "landingPage": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductListLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBCustomUrlLandingPage"
                  }
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "SBCampaignResponseCommonV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignResponseCommon32"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBCampaignResponseV3_3": {
        "description": "SB campaign",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCampaignResponseCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
          }
        ]
      },
      "SBCategoryResponse": {
        "properties": {
          "estimatedReach": {
            "description": "(As of 05/28/2024, `STREAMING_VIDEO` is deprecated). The estimated daily reach range of the category. Only set when supply source is `STREAMING_VIDEO`",
            "type": "string"
          },
          "id": {
            "description": "The category identifier.",
            "format": "int64",
            "type": "integer"
          },
          "isTargetable": {
            "description": "Set to `true` if the category can be targeted in a targeting expression, and `false` if not.",
            "type": "boolean"
          },
          "name": {
            "description": "The category name.",
            "type": "string"
          },
          "path": {
            "description": "The path of the category within the category catalogue.",
            "type": "string"
          },
          "translatedName": {
            "description": "The category name translated to the specified locale in the request.",
            "type": "string"
          },
          "translatedPath": {
            "description": "The path of the category within the category catalogue translated to the specified locale in the request.",
            "type": "string"
          }
        }
      },
      "SBCollectionCreative": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreative"
          },
          {
            "properties": {
              "asins": {
                "description": "An array of ASINs associated with the creative. **Note** do not pass an empty array. This results in an error.",
                "items": {
                  "type": "string"
                },
                "maxItems": 3,
                "type": "array"
              },
              "brandLogoAssetId": {
                "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.",
                "type": "string"
              },
              "brandLogoUrl": {
                "description": "The address of the hosted image.",
                "readOnly": true,
                "type": "string"
              },
              "brandName": {
                "description": "The brand name.",
                "maxLength": 30,
                "type": "string"
              },
              "headline": {
                "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
                "maxLength": 50,
                "type": "string"
              },
              "shouldOptimizeAsins": {
                "description": "Note that this field is supported only in the US and UK marketplaces. Set to `true` to have Amazon show other products from your landing page in the advertisement if they are more relevant to the shopper's search. Set to `false` to use the ASINs specified in the `asins` field. Do not specify in unsupported marketplaces.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "description": "Render one or more product images and product details."
      },
      "SBCommonKeywords": {
        "properties": {
          "keywords": {
            "description": "An array of keywords associated with the campaign.",
            "items": {
              "properties": {
                "bid": {
                  "$ref": "#/components/schemas/Bid"
                },
                "keywordText": {
                  "description": "The keyword text. Maximum of 10 words.",
                  "type": "string"
                },
                "matchType": {
                  "$ref": "#/components/schemas/MatchType"
                },
                "nativeLanguageKeyword": {
                  "description": "The unlocalized keyword text in the preferred locale of the advertiser.",
                  "type": "string"
                },
                "nativeLanguageLocale": {
                  "description": "The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "writeOnly": true
          },
          "negativeKeywords": {
            "description": "An array of negative keywords associated with the campaign.",
            "items": {
              "properties": {
                "keywordText": {
                  "description": "The keyword text. Maximum of 10 words.",
                  "type": "string"
                },
                "matchType": {
                  "$ref": "#/components/schemas/NegativeMatchType"
                }
              },
              "type": "object"
            },
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "writeOnly": true
          }
        }
      },
      "SBCommonTargets": {
        "properties": {
          "negativeTargets": {
            "items": {
              "properties": {
                "expressions": {
                  "description": "An array of targets associated with the campaign.",
                  "items": {
                    "$ref": "#/components/schemas/SBExpression"
                  },
                  "type": "array",
                  "writeOnly": true
                }
              },
              "type": "object"
            },
            "maxItems": 100,
            "minItems": 1,
            "type": "array"
          },
          "targets": {
            "items": {
              "properties": {
                "bid": {
                  "$ref": "#/components/schemas/Bid"
                },
                "expressions": {
                  "description": "An array of targets associated with the campaign.",
                  "items": {
                    "$ref": "#/components/schemas/SBExpression"
                  },
                  "type": "array",
                  "writeOnly": true
                }
              },
              "type": "object"
            },
            "maxItems": 100,
            "minItems": 1,
            "type": "array"
          }
        }
      },
      "SBCreateCampaignNegativeKeyword": {
        "description": "An array of negative keywords associated with the campaign.",
        "items": {
          "properties": {
            "keywordText": {
              "description": "The keyword text. Maximum of 10 words.",
              "type": "string"
            },
            "matchType": {
              "$ref": "#/components/schemas/NegativeMatchType"
            }
          }
        },
        "type": "array",
        "writeOnly": true
      },
      "SBCreateCampaignPositiveKeyword": {
        "description": "An array of keywords associated with the campaign.",
        "items": {
          "properties": {
            "bid": {
              "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.",
              "type": "number"
            },
            "keywordText": {
              "description": "The keyword text. Maximum of 10 words.",
              "type": "string"
            },
            "matchType": {
              "$ref": "#/components/schemas/MatchType"
            }
          }
        },
        "type": "array",
        "writeOnly": true
      },
      "SBCreateCampaignRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithExpressions"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithExpressions"
          }
        ]
      },
      "SBCreateCampaignRequestCommon": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          },
          "name": {
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBCreateCampaignRequestCommonV3_2": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormatV3_2"
          },
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductCollectionCreative"
              },
              {
                "$ref": "#/components/schemas/SBStoreSpotlightCreative"
              }
            ]
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          },
          "name": {
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBCreateCampaignRequestCommonV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommonV3_2"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBCreateCampaignRequestV3_2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithKeywordsV3_2"
          },
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithExpressionsV3_2"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithExpressions"
          }
        ]
      },
      "SBCreateCampaignRequestV3_3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithKeywordsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithExpressionsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithExpressions"
          }
        ]
      },
      "SBCreateCampaignWithExpressions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCreateCampaignWithExpressionsV3_2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommonV3_2"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCreateCampaignWithExpressionsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCreateCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateCampaignWithKeywordsV3_2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommonV3_2"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateCampaignWithKeywordsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateCampaignsResponseDefault": {
        "description": "|-\n        Applies to:\n        | Operation | Path |\n        |-----------| -----|\n        |[createCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| POST /sb/campaigns|\n        <br/>",
        "properties": {
          "adGroupResponses": {
            "description": "An array of ad groups associated with the campaign.",
            "items": {
              "properties": {
                "adGroupId": {
                  "description": "The ad group identifier.",
                  "format": "int64",
                  "type": "integer"
                },
                "code": {
                  "description": "An enumerated response code.",
                  "type": "string"
                },
                "description": {
                  "description": "A human-readable description of the enumerated response code in the `code` field.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "campaignId": {
            "description": "The campaign identifier.",
            "format": "int64",
            "type": "integer"
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          },
          "keywordResponses": {
            "description": "An array of keywords associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/SBKeywordResponse"
            },
            "type": "array"
          },
          "negativeKeywordResponses": {
            "description": "An array of negative keywords associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/SBKeywordResponse"
            },
            "type": "array"
          },
          "negativeTargetingClauseResponses": {
            "description": "An array of negative targets associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/SBTargetingClauseResponse"
            },
            "type": "array"
          },
          "targetingClauseResponses": {
            "description": "An array of targets associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/SBTargetingClauseResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBCreateCampaignsResponseFullV3_3": {
        "description": "|-\n        Applies to:\n        | Operation | Path |\n        |-----------| -----|\n        |[createCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| POST /sb/campaigns|\n        <br/>",
        "properties": {
          "allOf": {
            "$ref": "#/components/schemas/SBCreateCampaignsResponseDefault"
          },
          "campaign": {
            "$ref": "#/components/schemas/SBCampaignResponseV3_3"
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBCreateDraftCampaignNegativeKeyword": {
        "properties": {
          "keywordText": {
            "description": "The keyword text. Maximum length is ten words.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/NegativeMatchType"
          }
        }
      },
      "SBCreateDraftCampaignPositiveKeyword": {
        "properties": {
          "bid": {
            "description": "The bid associated with the keyword. For information on the maximum allowable bid, see the 'keyword bid constraints by marketplace' section of the 'supported features' document in the 'guides' section. Note that the bid cannot not be larger than the budget associated with the campaign.",
            "type": "number"
          },
          "keywordText": {
            "description": "The keyword text. Maximum length is ten words.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          }
        }
      },
      "SBCreateDraftCampaignRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithProductTargets"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithProductTargets"
          }
        ]
      },
      "SBCreateDraftCampaignRequestCommon": {
        "properties": {
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to have Amazon automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget associated with the draft campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "endDate": {
            "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          },
          "name": {
            "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the Portfolio to which the draft campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "budget",
          "budgetType"
        ]
      },
      "SBCreateDraftCampaignRequestCommonV3_2": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormatV3_2"
          },
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to have Amazon automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget associated with the draft campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductCollectionCreative"
              },
              {
                "$ref": "#/components/schemas/SBStoreSpotlightCreative"
              }
            ]
          },
          "endDate": {
            "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          },
          "name": {
            "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the Portfolio to which the draft campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "budget",
          "budgetType"
        ]
      },
      "SBCreateDraftCampaignRequestCommonV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommonV3_2"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBCreateDraftCampaignRequestV3_2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithKeywordsV3_2"
          },
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithProductTargetsV3_2"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithProductTargets"
          }
        ]
      },
      "SBCreateDraftCampaignRequestV3_3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithKeywordsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithProductTargetsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithProductTargets"
          }
        ]
      },
      "SBCreateDraftCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateDraftCampaignWithKeywordsV3_2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommonV3_2"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateDraftCampaignWithKeywordsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateDraftCampaignWithProductTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCreateDraftCampaignWithProductTargetsV3_2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommonV3_2"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCreateDraftCampaignWithProductTargetsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCreateNegativeTargetingClauseRequest": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group.",
            "format": "int64",
            "type": "integer"
          },
          "campaignId": {
            "description": "The identifier of an existing campaign. The newly created target is associated to this campaign.",
            "format": "int64",
            "type": "integer"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
          }
        }
      },
      "SBCreateTargetingClauseRequest": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group.",
            "format": "int64",
            "type": "integer"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          },
          "campaignId": {
            "description": "The identifier of an existing campaign. The newly created target is associated to this campaign.",
            "format": "int64",
            "type": "integer"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBTargetingExpressions"
          }
        }
      },
      "SBCreateTargetsResponse": {
        "properties": {
          "createTargetErrorResults": {
            "description": "Lists errors that occured during target creation. Note that errors are correlated to target create requests by the `targetRequestIndex` field. This field corresponds to the order of the target object in the request. For example, if `targetRequestIndex` is set to `3`, an error occured during creation of the fourth target in the request.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "properties": {
                    "targetId": {
                      "$ref": "#/components/schemas/SBTargetId"
                    },
                    "targetRequestIndex": {
                      "$ref": "#/components/schemas/SBTargetRequestIndex"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "createTargetSuccessResults": {
            "description": "Lists the successfully created targets. Note that targets in the response are correlated to targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request.",
            "items": {
              "properties": {
                "targetId": {
                  "$ref": "#/components/schemas/SBTargetId"
                },
                "targetRequestIndex": {
                  "$ref": "#/components/schemas/SBTargetRequestIndex"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        }
      },
      "SBCreateThemesRequest": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group to which the target is associated.",
            "type": "string"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          },
          "campaignId": {
            "description": "The identifier of the campaign to which the target is associated.",
            "type": "string"
          },
          "themeType": {
            "$ref": "#/components/schemas/ThemeType"
          }
        },
        "required": [
          "adGroupId",
          "themeType",
          "bid"
        ]
      },
      "SBCreateThemesResponse": {
        "properties": {
          "error": {
            "description": "Lists errors that occurred during theme target creation. Note that errors are correlated to theme target create requests by the `index` field. This field corresponds to the order of the target object in the request. For example, if `index` is set to `3`, an error occurred during creation of the fourth theme target in the request.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "properties": {
                    "index": {
                      "$ref": "#/components/schemas/SBTargetRequestIndex"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "success": {
            "description": "Lists the successfully created theme targets. Note that theme targets in the response are correlated to theme targets in the request using the `index` field. For example, if `index` is set to `2`, the values correlate to the third theme target object in the request.",
            "items": {
              "properties": {
                "index": {
                  "$ref": "#/components/schemas/SBTargetRequestIndex"
                },
                "themeId": {
                  "$ref": "#/components/schemas/SBThemeId"
                }
              },
              "type": "object"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          }
        }
      },
      "SBCreative": {
        "description": "Note that the values of each field in this object are immutable for an existing campaign.",
        "properties": {
          "asins": {
            "description": "An array of ASINs associated with the creative. **Note** do not pass an empty array, this results in an error.",
            "items": {
              "type": "string"
            },
            "maximum": 3,
            "minimum": 0,
            "type": "array"
          },
          "brandLogoAssetID": {
            "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.",
            "type": "string"
          },
          "brandLogoUrl": {
            "description": "The address of the hosted image.",
            "readOnly": true,
            "type": "string"
          },
          "brandName": {
            "description": "A brand name. Maximum length is 30 characters.",
            "type": "string"
          },
          "headline": {
            "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
            "type": "string"
          },
          "shouldOptimizeAsins": {
            "default": false,
            "description": "**NOTE** Starting on March 25th, 2021, this property will no longer be supported. This feature is currently available in the US and UK. Existing Sponsored Brands campaigns with product optimization enabled will no longer have the products in the creative automatically optimized. Campaigns with product optimization enabled will be converted to standard Sponsored Brands product collection campaigns with the default selected products showing in the creative. For POST and PUT operations, setting this property to `true` will not have any effect. The value returned in the response will always be `false`. For the GET operation, the value of this field will always be `false`. And starting on September 25th, 2021, this property will be removed completely. ",
            "type": "boolean"
          }
        }
      },
      "SBCustomImageCrop": {
        "description": "The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted.",
        "properties": {
          "height": {
            "description": "The number of pixels to crop down from the value specified as `top`",
            "type": "integer"
          },
          "left": {
            "description": "The leftmost pixel from which to begin cropping",
            "type": "integer"
          },
          "top": {
            "description": "The highest pixel from which to begin cropping",
            "type": "integer"
          },
          "width": {
            "description": "The number of pixels to crop rightwards from the value specified as `left`",
            "type": "integer"
          }
        }
      },
      "SBCustomUrlLandingPage": {
        "allOf": [
          {
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "A landing page including at least 3 ASINs. Note that custom landing page URLs can only be specified by vendors."
      },
      "SBDetailPageLandingPage": {
        "allOf": [
          {
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "An Amazon product detail page."
      },
      "SBDraftAllTargetingClauses": {
        "properties": {
          "negativeTargets": {
            "description": "An array of negative keywords associated with the draft campaign.",
            "items": {
              "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
            },
            "type": "array"
          },
          "targets": {
            "description": "An array of targets associated with the draft campaign.",
            "items": {
              "$ref": "#/components/schemas/SBDraftTargetingClause"
            },
            "type": "array"
          }
        },
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBDraftCampaign": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBase"
              },
              {
                "properties": {
                  "keywords": {
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    },
                    "type": "array"
                  },
                  "negativeKeywords": {
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBase"
              },
              {
                "properties": {
                  "negativeTargets": {
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    },
                    "type": "array"
                  },
                  "targets": {
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "properties": {
                  "keywords": {
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    },
                    "type": "array"
                  },
                  "negativeKeywords": {
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "properties": {
                  "negativeTargets": {
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    },
                    "type": "array"
                  },
                  "targets": {
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          }
        ]
      },
      "SBDraftCampaignBase": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget associated with the draft campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "draftCampaignId": {
            "description": "The identifier of the draft campaign.",
            "type": "integer"
          },
          "endDate": {
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "landingPage": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductListLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBStoreLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBCustomUrlLandingPage"
              }
            ]
          },
          "name": {
            "description": "The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the Portfolio to which the draft campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBDraftCampaignBaseV3_2": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormatV3_2"
          },
          "bidAdjustments": {
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            },
            "type": "array"
          },
          "bidMultiplier": {
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "maximum": 99.0,
            "minimum": -99.0,
            "type": "number"
          },
          "bidOptimization": {
            "default": true,
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "type": "boolean"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget associated with the draft campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductCollectionCreative"
              },
              {
                "$ref": "#/components/schemas/SBStoreSpotlightCreative"
              }
            ]
          },
          "draftCampaignId": {
            "description": "The identifier of the draft campaign.",
            "type": "integer"
          },
          "endDate": {
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "landingPage": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductListLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBStoreLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBCustomUrlLandingPage"
              }
            ]
          },
          "name": {
            "description": "The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the Portfolio to which the draft campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBDraftCampaignBaseV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_2"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBDraftCampaignDeleteResponse": {
        "properties": {
          "code": {
            "description": "The status of the deletion request.",
            "type": "string"
          },
          "draftCampaignId": {
            "description": "The campaign identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBDraftCampaignResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[createDraftCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| POST /sb/drafts/campaigns|\n|[updateDraftCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| PUT /sb/drafts/campaigns|\n|[deleteDraftCampaign](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| GET /sb/drafts/campaigns/{draftCampaignId}|\n<br/>",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseWithExpressions"
          }
        ]
      },
      "SBDraftCampaignResponseCommon": {
        "properties": {
          "code": {
            "description": "The draft campaign response code.",
            "type": "string"
          },
          "draftCampaignId": {
            "description": "The identifier of the draft campaign.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBDraftCampaignResponseWithExpressions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseCommon"
          },
          {
            "properties": {
              "negativeTargetingClauseResponses": {
                "items": {
                  "$ref": "#/components/schemas/SBExpressionResponse"
                },
                "type": "array"
              },
              "targetingClauseResponses": {
                "items": {
                  "$ref": "#/components/schemas/SBExpressionResponse"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SBDraftCampaignResponseWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseCommon"
          },
          {
            "properties": {
              "details": {
                "description": "A human-readable description of the 'code' field value.",
                "type": "string"
              },
              "keywordResponses": {
                "items": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                },
                "type": "array"
              },
              "negativeKeywordResponses": {
                "items": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SBDraftCampaignV3_2": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBaseV3_2"
              },
              {
                "properties": {
                  "keywords": {
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    },
                    "type": "array"
                  },
                  "negativeKeywords": {
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBaseV3_2"
              },
              {
                "properties": {
                  "negativeTargets": {
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    },
                    "type": "array"
                  },
                  "targets": {
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "properties": {
                  "keywords": {
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    },
                    "type": "array"
                  },
                  "negativeKeywords": {
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "properties": {
                  "negativeTargets": {
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    },
                    "type": "array"
                  },
                  "targets": {
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          }
        ]
      },
      "SBDraftCampaignV3_3": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
              },
              {
                "properties": {
                  "keywords": {
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    },
                    "type": "array"
                  },
                  "negativeKeywords": {
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
              },
              {
                "properties": {
                  "negativeTargets": {
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    },
                    "type": "array"
                  },
                  "targets": {
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "properties": {
                  "keywords": {
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    },
                    "type": "array"
                  },
                  "negativeKeywords": {
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "properties": {
                  "negativeTargets": {
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    },
                    "type": "array"
                  },
                  "targets": {
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          }
        ]
      },
      "SBDraftCampaignWithKeywordsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
          },
          {
            "$ref": "#/components/schemas/SBDraftKeywordsNegativeKeywords"
          }
        ],
        "description": "SB create campaign with keywords",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBDraftCampaignWithTargetsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
          },
          {
            "$ref": "#/components/schemas/SBDraftAllTargetingClauses"
          }
        ],
        "description": "SB create campaign with targets",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBDraftKeyword": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "bid": {
            "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.",
            "type": "number"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "keywordId": {
            "description": "The keyword identifier.",
            "format": "int64",
            "type": "integer"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "state": {
            "description": "| state | description |\n|-------|-------------|\n| draft | Newly created keyword. |\n| enabled | Keyword passed moderation. | ",
            "enum": [
              "draft",
              "enabled"
            ],
            "type": "string"
          }
        }
      },
      "SBDraftKeywordsNegativeKeywords": {
        "properties": {
          "keywords": {
            "description": "An array of keywords associated with the Draft campaign.",
            "items": {
              "$ref": "#/components/schemas/SBDraftKeyword"
            },
            "type": "array",
            "writeOnly": true
          },
          "negativeKeywords": {
            "description": "An array of negative keywords associated with the Draft campaign.",
            "items": {
              "$ref": "#/components/schemas/SBDraftNegativeKeyword"
            },
            "type": "array",
            "writeOnly": true
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBDraftNegativeKeyword": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "keywordId": {
            "description": "The keyword identifier.",
            "format": "int64",
            "type": "integer"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/NegativeMatchType"
          },
          "state": {
            "enum": [
              "draft"
            ],
            "type": "string"
          }
        }
      },
      "SBDraftNegativeTargetingClause": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of an existing ad group. The newly created target is associated to the specified ad group.",
            "format": "int64",
            "type": "integer"
          },
          "campaignId": {
            "description": "The identifier of an existing campaign. The newly created target is associated to the specified campaign.",
            "format": "int64",
            "type": "integer"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "targetId": {
            "description": "The target identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBDraftTargetingClause": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group to which the target is associated.",
            "format": "int64",
            "type": "integer"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          },
          "campaignId": {
            "description": "The identifier of the campaign to which the target is associated.",
            "format": "int64",
            "type": "integer"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBExpression"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "targetId": {
            "description": "The target identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBExpression": {
        "description": "A name value pair that defines a targeting expression. The `type` field defines the predicate. The `value` field defines the value to match for the predicate. ",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ProductPredicateType"
          },
          "value": {
            "description": "The text of the targeting expression. The `-` token defines a range. For example, `2-4` defines a range of 2, 3, and 4.",
            "type": "string"
          }
        }
      },
      "SBExpressionRequestIndex": {
        "description": "Correlates the expression to the expression array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBExpressionResponse": {
        "properties": {
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "targetId": {
            "description": "The targeting expression identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBGetDraftCampaignResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          }
        ]
      },
      "SBGetDraftCampaignResponseV3_2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_2"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          }
        ]
      },
      "SBGetDraftCampaignResponseV3_3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          }
        ]
      },
      "SBKeyword": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[listKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| GET /sb/keywords|\n|[getKeyword](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| GET /sb/keywords/{keywordId}|\n<br/>",
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "bid": {
            "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.",
            "type": "number"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "keywordId": {
            "description": "The keyword identifier.",
            "format": "int64",
            "type": "integer"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "nativeLanguageKeyword": {
            "description": "The unlocalized keyword text in the preferred locale of the advertiser.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SBKeywordState"
          }
        }
      },
      "SBKeywordExpression": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MatchType"
          },
          "value": {
            "description": "The text of the keyword. Maximum of 10 words.",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBKeywordRecommendationCreativeType": {
        "description": "Optional SB creative type used for generating static or video generated keyword recommendations.  Inferred by asins if not included.\n|Identifier|Description|Recommendations|\n|----------|-----------|-----------|\n|PRODUCT_COLLECTION| Showcase multiple products within a branded shopping experience|Static|\n|AUTHOR_COLLECTION| Showcase books under your name that direct to your Book Brand landing page|Static|\n|STORE_SPOTLIGHT| Showcase your brand logo, headline, and up to 3 product categories or sub-pages|Static|\n|VIDEO| Display a video ad promoting a product that redirects to its landing page|Video|\n|BRAND_VIDEO| Display a branded video ad that redirects shoppers to your Brand Store landing page|Video|\n<br/>",
        "enum": [
          "PRODUCT_COLLECTION",
          "AUTHOR_COLLECTION",
          "STORE_SPOTLIGHT",
          "VIDEO",
          "BRAND_VIDEO"
        ],
        "type": "string"
      },
      "SBKeywordRecommendationError": {
        "description": "The Error Response Object.",
        "properties": {
          "code": {
            "description": "The HTTP status code of the response.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBKeywordRecommendationGoal": {
        "default": "PAGE_VISIT",
        "description": "Optionally indicate the desired goal of your campaign. Different keyword recommendations will be provided depending on your specified goal. \n|Identifier|Description|\n|----------|-----------|\n|PAGE_VISIT| Boost the visits to your landing page|\n|BRAND_IMPRESSION_SHARE| Facilitate consumers' awareness of your brand|\n|ACQUIRE_NEW_CUSTOMERS| This property is a PREVIEW ONLY and cannot be used as part of a request or response, this note will be removed once supported. This goal drives new customer acquisition for your brands|\n|AD_VIEWS| This property is a PREVIEW ONLY and cannot be used as part of a request or response, this note will be removed once supported. This goal maximizes view for your ads|<br/>",
        "enum": [
          "PAGE_VISIT",
          "BRAND_IMPRESSION_SHARE",
          "ACQUIRE_NEW_CUSTOMERS",
          "AD_VIEWS"
        ],
        "type": "string"
      },
      "SBKeywordRecommendationImpressionRank": {
        "description": "The account-level ad-attributed impression rank for the search-term / keyword. Provides the [1:N] place the advertiser ranks among all advertisers for the keyword by ad impressions in a marketplace in the last 7 days. It tells an advertiser how many advertisers had higher share of ad impressions.",
        "format": "int64",
        "type": "integer"
      },
      "SBKeywordRecommendationImpressionShare": {
        "description": "The account-level ad-attributed impression share for the search-term / keyword. Provides percentage share of all ad impressions the advertiser has for the keyword in the last 7 days. This metric helps advertisers identify potential opportunities based on their share of relevant keywords.",
        "format": "double",
        "maximum": 100,
        "minimum": 0,
        "type": "number"
      },
      "SBKeywordRecommendationMatchType": {
        "description": "The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Advertising support center.",
        "enum": [
          "broad",
          "exact",
          "phrase"
        ],
        "type": "string"
      },
      "SBKeywordRecommendationRequestAsin": {
        "properties": {
          "asins": {
            "items": {
              "description": "An array of landing page ASINs.",
              "maximum": 100,
              "minimum": 1,
              "type": "string"
            },
            "type": "array"
          },
          "creativeAsins": {
            "items": {
              "description": "Optional. An array of creative ASINs that are displayed in the SB creative.",
              "maximum": 3,
              "minimum": 0,
              "type": "string"
            },
            "type": "array"
          },
          "creativeType": {
            "$ref": "#/components/schemas/SBKeywordRecommendationCreativeType"
          },
          "goal": {
            "$ref": "#/components/schemas/SBKeywordRecommendationGoal"
          },
          "locale": {
            "description": "Optional locale to request keyword suggestion translations. For example, to request Simplified Chinese translations in US, provide locale “zh_CN”. Response will include both keyword suggestions and their translations. Supported locales include: Simplified Chinese (locale: “zh_CN”) for US, UK and CA. English (locale: “en_GB”) for DE, FR, IT and ES.",
            "type": "string"
          },
          "maxNumSuggestions": {
            "description": "Maximum number of suggestions to return. Max value is 1000. If not provided, default to 100.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "asins"
        ],
        "type": "object"
      },
      "SBKeywordRecommendationRequestUrl": {
        "properties": {
          "creativeAsins": {
            "items": {
              "description": "Optional. An array of creative ASINs that are displayed in the SB creative.",
              "maximum": 3,
              "minimum": 0,
              "type": "string"
            },
            "type": "array"
          },
          "creativeType": {
            "$ref": "#/components/schemas/SBKeywordRecommendationCreativeType"
          },
          "goal": {
            "$ref": "#/components/schemas/SBKeywordRecommendationGoal"
          },
          "locale": {
            "description": "Optional locale to request keyword suggestion translations. For example, to request Simplified Chinese translations in US, provide locale “zh_CN”. Response will include both keyword suggestions and their translations. Supported locales include: Simplified Chinese (locale: “zh_CN”) for US, UK and CA. English (locale: “en_GB”) for DE, FR, IT and ES.",
            "type": "string"
          },
          "maxNumSuggestions": {
            "description": "Maximum number of suggestions to return. Max value is 1000. If not provided, default to 100.",
            "format": "int64",
            "type": "integer"
          },
          "url": {
            "description": "The URL of the Stores page, or, Vendors may also specify the URL of a custom landing page.",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "SBKeywordRecommendationType": {
        "description": "A recommendation identifier that describes the suggested action for the recommendation.\n|Identifier|Description|\n|----------|-----------|\n|addKeyword|The suggested action is to add the keyword.|\n<br/>",
        "enum": [
          "addKeyword"
        ],
        "type": "string"
      },
      "SBKeywordResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[createKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| POST /sb/keywords|\n|[createNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|POST /sb/negativeKeywords|\n|[updateNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|PUT /sb/negativeKeywords|\n|[archiveNegativeKeyword](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|DELETE /sb/negativeKeywords/{keywordId}|\n<br/>",
        "properties": {
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          },
          "errors": {
            "description": "An array of error objects.",
            "items": {
              "$ref": "#/components/schemas/KeywordError"
            },
            "type": "array"
          },
          "keywordId": {
            "description": "The keyword identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBKeywordState": {
        "enum": [
          "enabled",
          "paused",
          "archived",
          "draft"
        ],
        "type": "string"
      },
      "SBKeywordSuggestion": {
        "properties": {
          "matchType": {
            "$ref": "#/components/schemas/SBKeywordRecommendationMatchType"
          },
          "recommendationId": {
            "description": "Unique ID for each recommendation.",
            "type": "string"
          },
          "searchTermImpressionRank": {
            "$ref": "#/components/schemas/SBKeywordRecommendationImpressionRank"
          },
          "searchTermImpressionShare": {
            "$ref": "#/components/schemas/SBKeywordRecommendationImpressionShare"
          },
          "translation": {
            "description": "Localized keyword value if locale was specified.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SBKeywordRecommendationType"
          },
          "value": {
            "description": "Recommended keyword value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBKeywordsNegativeKeywords": {
        "properties": {
          "keywords": {
            "description": "An array of keywords associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/Keyword"
            },
            "type": "array",
            "writeOnly": true
          },
          "negativeKeywords": {
            "description": "An array of negative keywords associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/NegativeKeyword"
            },
            "type": "array",
            "writeOnly": true
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBLandingPage": {
        "description": "Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.",
        "properties": {
          "asins": {
            "description": "An array of ASINs used to generate a simple landing page. The response includes the URL of the generated simple landing page. Do not include this property in the request if the `url` property is also included, these properties are mutually exclusive.",
            "items": {
              "type": "string"
            },
            "maximum": 100,
            "minimum": 3,
            "type": "array",
            "writeOnly": true
          },
          "url": {
            "description": "URL of an existing simple landing page or Store page. Vendors may also specify the URL of a custom landing page. If a custom URL is specified, the landing page must include the ASINs of at least three products that are advertised as part of the campaign. Do not include this property in the request if the `asins` property is also included, these properties are mutually exclusive.",
            "type": "string"
          }
        }
      },
      "SBListCampaignItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "properties": {
              "bidAdjustments": {
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                },
                "type": "array"
              },
              "bidMultiplier": {
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "format": "double",
                "type": "number"
              },
              "bidOptimization": {
                "description": "Set to true to allow Amazon to automatically optimize bids for placements below top of search.",
                "type": "boolean"
              },
              "creative": {
                "$ref": "#/components/schemas/SBCreative"
              },
              "landingPage": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductListLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBCustomUrlLandingPage"
                  }
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "SBListCampaignItemV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBListCampaignItem"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBListCampaignsResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[listCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| GET /sb/campaigns|\n<br/>",
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBListCampaignsResponseCommon"
              },
              {
                "properties": {
                  "adFormat": {
                    "$ref": "#/components/schemas/AdFormat"
                  },
                  "bidAdjustments": {
                    "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
                    "items": {
                      "$ref": "#/components/schemas/BidAdjustment"
                    },
                    "type": "array"
                  },
                  "bidMultiplier": {
                    "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                    "maximum": 99.0,
                    "minimum": -99.0,
                    "type": "number"
                  },
                  "bidOptimization": {
                    "default": true,
                    "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
                    "type": "boolean"
                  },
                  "creative": {
                    "$ref": "#/components/schemas/SBCreative"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBListCampaignsResponseCommon"
              },
              {
                "properties": {
                  "adFormat": {
                    "$ref": "#/components/schemas/AdFormat"
                  },
                  "creative": {
                    "$ref": "#/components/schemas/SBVideoCreative"
                  }
                },
                "type": "object"
              }
            ]
          }
        ]
      },
      "SBListCampaignsResponseCommon": {
        "properties": {
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "campaignId": {
            "description": "The campaign identifier.",
            "readOnly": true,
            "type": "integer"
          },
          "endDate": {
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "landingPage": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductListLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBStoreLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBDetailPageLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBCustomUrlLandingPage"
              }
            ]
          },
          "name": {
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "servingStatus": {
            "description": "|Value|Description|\n|-----|-----------|\n|asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|\n|billingError| The billing information associated with the account requires correction.|\n|ended| The value specified in the `endDate` field is in the past.|\n|landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|outOfBudget| The campaign has run out of budget.|\n|paused|The campaign state is set to `paused`.|\n|pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.\n|ready| The campaign is scheduled for a future date.|\n|rejected| The campaign failed moderation review.|\n|running| The campaign is enabled and serving.|\n|scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|terminated| The state of the campaign is set to `archived`.|\n<br/>",
            "enum": [
              "asinNotBuyable",
              "billingError",
              "ended",
              "landingPageNotAvailable",
              "outOfBudget",
              "paused",
              "pendingReview",
              "ready",
              "rejected",
              "running",
              "scheduled",
              "terminated"
            ],
            "readOnly": true,
            "type": "string"
          },
          "startDate": {
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          }
        }
      },
      "SBMatchType": {
        "description": "The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "broad",
          "exact",
          "phrase"
        ],
        "type": "string",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBNegativeExpression": {
        "properties": {
          "type": {
            "enum": [
              "asinBrandSameAs",
              "asinSameAs"
            ],
            "type": "string"
          },
          "value": {
            "description": "The text of the negative expression.",
            "type": "string"
          }
        }
      },
      "SBNegativeExpressionRequestIndex": {
        "description": "Correlates the negative expression to the negative expression array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBNegativeKeyword": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "format": "int64",
            "type": "integer"
          },
          "keywordId": {
            "description": "The keyword identifier.",
            "format": "int64",
            "type": "integer"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/NegativeMatchType"
          },
          "state": {
            "$ref": "#/components/schemas/SBKeywordState"
          }
        }
      },
      "SBNegativeKeywordState": {
        "description": "The current state of the negative keyword.",
        "enum": [
          "enabled",
          "archived",
          "draft"
        ],
        "type": "string"
      },
      "SBNegativeMatchType": {
        "description": "The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "negativeExact",
          "negativePhrase"
        ],
        "type": "string",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBNegativeResolvedExpression": {
        "properties": {
          "type": {
            "enum": [
              "asinBrandSameAs",
              "asinSameAs"
            ],
            "type": "string"
          },
          "value": {
            "description": "The human-readable negative target text.",
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "SBNegativeTarget": {
        "properties": {
          "expressions": {
            "items": {
              "$ref": "#/components/schemas/SBExpression"
            },
            "type": "array"
          }
        },
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBNegativeTargetId": {
        "description": "The identifier of a negative target.",
        "format": "int64",
        "type": "integer"
      },
      "SBNegativeTargetRequestIndex": {
        "description": "Correlates the negative target to the negative target array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBNegativeTargetState": {
        "enum": [
          "enabled",
          "archived"
        ],
        "type": "string"
      },
      "SBNegativeTargetingClause": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group",
            "format": "int64",
            "type": "integer"
          },
          "campaignId": {
            "description": "The identifier of an existing campaign. The newly created target is associated to this campaign",
            "format": "int64",
            "type": "integer"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          },
          "targetId": {
            "description": "The target identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBNegativeTargetingExpressions": {
        "items": {
          "$ref": "#/components/schemas/SBNegativeExpression"
        },
        "type": "array"
      },
      "SBProductCollectionCreative": {
        "properties": {
          "asins": {
            "items": {
              "description": "An array of ASINs associated with the creative. **Note** do not pass an empty array. This results in an error.",
              "type": "string"
            },
            "maxItems": 3,
            "minItems": 0,
            "type": "array"
          },
          "brandLogoAssetID": {
            "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Advertising console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.",
            "type": "string"
          },
          "brandLogoCrop": {
            "$ref": "#/components/schemas/SBBrandLogoCrop"
          },
          "brandLogoUrl": {
            "description": "The address of the hosted image.",
            "type": "string"
          },
          "brandName": {
            "description": "A brand name. Maximum length is 30 characters.",
            "type": "string"
          },
          "customImageAssetId": {
            "description": "The identifier of the Custom image from the Store assets library. See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#customimage) for more information on what constitutes a valid Custom image.",
            "type": "string"
          },
          "customImageCrop": {
            "$ref": "#/components/schemas/SBCustomImageCrop"
          },
          "customImageUrl": {
            "description": "The address of the hosted Custom image.",
            "type": "string"
          },
          "headline": {
            "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
            "type": "string"
          },
          "shouldOptimizeAsins": {
            "description": "Starting on March 25th, 2021, this property will no longer be supported. This feature is currently available in the US and UK. Existing Sponsored Brands campaigns with product optimization enabled will no longer have the products in the creative automatically optimized. Campaigns with product optimization enabled will be converted to standard Sponsored Brands product collection campaigns with the default selected products showing in the creative. For POST and PUT operations, setting this property to true will not have any effect. The value returned in the response will always be false. For the GET operation, the value of this field will always be false. And starting on September 25th, 2021, this property will be removed completely.",
            "type": "boolean"
          }
        }
      },
      "SBProductListLandingPage": {
        "allOf": [
          {
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "A landing page showcasing a list of ASINs."
      },
      "SBProductTargetState": {
        "enum": [
          "enabled",
          "paused",
          "archived",
          "draft"
        ],
        "type": "string"
      },
      "SBResolvedExpression": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ProductPredicateType"
          },
          "value": {
            "description": "The human-readable target text.",
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "SBStoreLandingPage": {
        "allOf": [
          {
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "An Amazon Store page or subpage."
      },
      "SBStoreSpotlightCreative": {
        "properties": {
          "brandLogoAssetID": {
            "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Advertising console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.",
            "type": "string"
          },
          "brandLogoCrop": {
            "$ref": "#/components/schemas/SBBrandLogoCrop"
          },
          "brandLogoUrl": {
            "description": "The address of the hosted image.",
            "type": "string"
          },
          "brandName": {
            "description": "A brand name. Maximum length is 30 characters.",
            "type": "string"
          },
          "headline": {
            "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
            "type": "string"
          },
          "subpages": {
            "items": {
              "properties": {
                "asin": {
                  "description": "An ASIN on the Store subpage. The ASIN image will be used to represent the subpage.",
                  "type": "string"
                },
                "pageTitle": {
                  "description": "The title of the subpage. Maximum length is 50 characters.",
                  "type": "string"
                },
                "url": {
                  "description": "URL of an existing Store page. Must be a subpage of the Store landing page associated with the campaign.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "maxItems": 3,
            "minItems": 3,
            "type": "array"
          }
        }
      },
      "SBSubmitDraftCampaignResponse": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignResponseWithKeywords"
              },
              {
                "properties": {
                  "campaignId": {
                    "description": "The identifier of the campaign.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignResponseWithExpressions"
              },
              {
                "properties": {
                  "campaignId": {
                    "description": "The identifier of the campaign.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            ]
          }
        ]
      },
      "SBTarget": {
        "properties": {
          "bid": {
            "$ref": "#/components/schemas/SBAPIBid"
          },
          "expressions": {
            "items": {
              "$ref": "#/components/schemas/SBExpression"
            },
            "type": "array"
          }
        },
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBTargetId": {
        "description": "The identifier of a target.",
        "format": "int64",
        "type": "integer"
      },
      "SBTargetRequestIndex": {
        "description": "Correlates the target to the target array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBTargetingClause": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group to which the target is associated.",
            "format": "int64",
            "type": "integer"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          },
          "campaignId": {
            "description": "The identifier of the campaign to which the target is associated.",
            "format": "int64",
            "type": "integer"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBExpression"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          },
          "targetId": {
            "description": "The target identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBTargetingClauseResponse": {
        "properties": {
          "code": {
            "type": "string"
          },
          "targetId": {
            "description": "The target identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBTargetingExpressions": {
        "items": {
          "$ref": "#/components/schemas/SBExpression"
        },
        "type": "array"
      },
      "SBTargetsNegativeTargets": {
        "properties": {
          "negativeTargets": {
            "items": {
              "$ref": "#/components/schemas/SBNegativeTarget"
            },
            "type": "array"
          },
          "targets": {
            "items": {
              "$ref": "#/components/schemas/SBTarget"
            },
            "type": "array"
          }
        },
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBTheme": {
        "description": "| themeType | description |\n|-----------|-------------|\n| KEYWORDS_RELATED_TO_YOUR_BRAND | keywords related to brands. |\n| KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES | keywords related to your landing pages. |",
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group associated with the theme target.",
            "type": "string"
          },
          "bid": {
            "description": "The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features).",
            "type": "number"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the theme target.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SBThemeState"
          },
          "themeId": {
            "description": "The theme target identifier.",
            "type": "string"
          },
          "themeType": {
            "$ref": "#/components/schemas/ThemeType"
          }
        }
      },
      "SBThemeId": {
        "description": "The identifier of theme target.",
        "type": "string"
      },
      "SBThemeState": {
        "enum": [
          "enabled",
          "paused",
          "archived"
        ],
        "type": "string"
      },
      "SBUpdateCampaignResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[updateCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| PUT /sb/campaigns|\n|[archiveCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)|DELETE /sb/campaigns/{campaignId}|\n<br/>",
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "format": "int64",
            "type": "integer"
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          }
        }
      },
      "SBUpdateCampaignResponseDefault": {
        "description": "|-\n        Applies to:\n        | Operation | Path |\n        |-----------| -----|\n        |[updateCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| PUT /sb/campaigns|\n        |[archiveCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)|DELETE /sb/campaigns/{campaignId}|\n        <br/>",
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "format": "int64",
            "type": "integer"
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ErrorEntry"
            },
            "type": "array"
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBUpdateDraftCampaignRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithProductTargets"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithProductTargets"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestCommon": {
        "allOf": [
          {
            "properties": {
              "bidAdjustments": {
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                },
                "type": "array"
              },
              "bidMultiplier": {
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "maximum": 99.0,
                "minimum": -99.0,
                "type": "number"
              },
              "bidOptimization": {
                "default": true,
                "description": "Set to `true` to have Amazon automatically optimize bids for placements below top of search.",
                "type": "boolean"
              },
              "brandEntityId": {
                "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.",
                "type": "string",
                "writeOnly": true
              },
              "budget": {
                "description": "The budget associated with the draft campaign.",
                "type": "number"
              },
              "budgetType": {
                "$ref": "#/components/schemas/BudgetType"
              },
              "creative": {
                "$ref": "#/components/schemas/SBCreative"
              },
              "draftCampaignId": {
                "description": "The identifier of the draft campaign.",
                "type": "integer"
              },
              "endDate": {
                "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.",
                "type": "string"
              },
              "name": {
                "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.",
                "type": "string"
              },
              "portfolioId": {
                "description": "The identifier of the Portfolio to which the draft campaign is associated.",
                "format": "int64",
                "type": "integer"
              },
              "startDate": {
                "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "budget",
              "budgetType"
            ],
            "type": "object"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestCommonV3_2": {
        "allOf": [
          {
            "properties": {
              "bidAdjustments": {
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents. `Not supported for video campaigns`",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                },
                "type": "array"
              },
              "bidMultiplier": {
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "maximum": 99.0,
                "minimum": -99.0,
                "type": "number"
              },
              "bidOptimization": {
                "default": true,
                "description": "Set to `true` to have Amazon automatically optimize bids for placements below top of search.",
                "type": "boolean"
              },
              "brandEntityId": {
                "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.",
                "type": "string",
                "writeOnly": true
              },
              "budget": {
                "description": "The budget associated with the draft campaign.",
                "type": "number"
              },
              "budgetType": {
                "$ref": "#/components/schemas/BudgetType"
              },
              "creative": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductCollectionCreative"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreSpotlightCreative"
                  }
                ]
              },
              "draftCampaignId": {
                "description": "The identifier of the draft campaign.",
                "type": "integer"
              },
              "endDate": {
                "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.",
                "type": "string"
              },
              "name": {
                "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.",
                "type": "string"
              },
              "portfolioId": {
                "description": "The identifier of the Portfolio to which the draft campaign is associated.",
                "format": "int64",
                "type": "integer"
              },
              "startDate": {
                "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "budget",
              "budgetType"
            ],
            "type": "object"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestV3_2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithKeywordsV3_2"
          },
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithProductTargetsV3_2"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithProductTargets"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestV3_3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithKeywordsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithProductTargetsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithProductTargets"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommon"
          },
          {
            "properties": {
              "keywords": {
                "description": "An array of keywords associated with the campaign.",
                "items": {
                  "properties": {
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    },
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              },
              "negativeKeywords": {
                "description": "An array of negative keywords associated with the campaign.",
                "items": {
                  "properties": {
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "draftCampaignId"
        ]
      },
      "SBUpdateDraftCampaignRequestWithKeywordsV3_2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommonV3_2"
          },
          {
            "properties": {
              "keywords": {
                "description": "An array of keywords associated with the campaign.",
                "items": {
                  "properties": {
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    },
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              },
              "negativeKeywords": {
                "description": "An array of negative keywords associated with the campaign.",
                "items": {
                  "properties": {
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "draftCampaignId"
        ]
      },
      "SBUpdateDraftCampaignRequestWithKeywordsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithKeywordsV3_2"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestWithProductTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommon"
          },
          {
            "properties": {
              "negativeTargets": {
                "items": {
                  "properties": {
                    "expressions": {
                      "items": {
                        "$ref": "#/components/schemas/SBExpression"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              },
              "targets": {
                "items": {
                  "properties": {
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    },
                    "expressions": {
                      "items": {
                        "$ref": "#/components/schemas/SBExpression"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "draftCampaignId"
        ]
      },
      "SBUpdateDraftCampaignRequestWithProductTargetsV3_2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommonV3_2"
          },
          {
            "properties": {
              "negativeTargets": {
                "items": {
                  "properties": {
                    "expressions": {
                      "items": {
                        "$ref": "#/components/schemas/SBExpression"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              },
              "targets": {
                "items": {
                  "properties": {
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    },
                    "expressions": {
                      "items": {
                        "$ref": "#/components/schemas/SBExpression"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "draftCampaignId"
        ]
      },
      "SBUpdateDraftCampaignRequestWithProductTargetsV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithProductTargetsV3_2"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ],
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBUpdateNegativeTargetingClauseRequest": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group.",
            "format": "int64",
            "type": "integer"
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          },
          "targetId": {
            "description": "The target identifier.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBUpdateTargetingClauseRequest": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group to which the target is associated.",
            "format": "int64",
            "type": "integer"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          },
          "campaignId": {
            "description": "The identifier of the campaign to which the target is associated.",
            "format": "int64",
            "type": "integer"
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          },
          "targetId": {
            "description": "The identifier of the target.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SBUpdateThemesRequest": {
        "properties": {
          "adGroupId": {
            "description": "The identifier of the ad group to which the target is associated.",
            "type": "string"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          },
          "campaignId": {
            "description": "The identifier of the campaign to which the target is associated.",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SBThemeState"
          },
          "themeId": {
            "description": "The identifier of the theme target.",
            "type": "string"
          }
        },
        "required": [
          "themeId",
          "adGroupId"
        ]
      },
      "SBVideoCampaignResponseCommon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "properties": {
              "creative": {
                "$ref": "#/components/schemas/SBVideoCreative"
              },
              "landingPage": {
                "$ref": "#/components/schemas/SBDetailPageLandingPage"
              },
              "portfolioId": {
                "description": "The identifier of the portfolio to which the campaign is associated.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "SBVideoCreateCampaignRequestCommon": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "$ref": "#/components/schemas/SBVideoCreative"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "name": {
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          }
        }
      },
      "SBVideoCreateCampaignWithExpressions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBVideoCreateCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBVideoCreateDraftCampaignRequestCommon": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "brandEntityId": {
            "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget associated with the draft campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "$ref": "#/components/schemas/SBVideoCreative"
          },
          "endDate": {
            "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "name": {
            "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the Portfolio to which the draft campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "budget",
          "budgetType"
        ]
      },
      "SBVideoCreateDraftCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBVideoCreateDraftCampaignWithProductTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBVideoCreative": {
        "allOf": [
          {
            "properties": {
              "asins": {
                "description": "An array of ASINs associated with the creative.",
                "items": {
                  "type": "string"
                },
                "maxItems": 1,
                "minItems": 1,
                "type": "array"
              },
              "type": {
                "description": "Type of creative",
                "enum": [
                  "video"
                ],
                "type": "string"
              },
              "videoMediaIds": {
                "description": "Video Asset IDs associated with the creative.",
                "items": {
                  "type": "string"
                },
                "maximum": 1,
                "minimum": 1,
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "Render one product image with associated media."
      },
      "SBVideoDraftCampaignBase": {
        "properties": {
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "brandEntityId": {
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands).",
            "type": "string",
            "writeOnly": true
          },
          "budget": {
            "description": "The budget associated with the draft campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "creative": {
            "$ref": "#/components/schemas/SBVideoCreative"
          },
          "draftCampaignId": {
            "description": "The identifier of the draft campaign.",
            "type": "integer"
          },
          "endDate": {
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously.",
            "type": "string"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBDetailPageLandingPage"
          },
          "name": {
            "description": "The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed.",
            "type": "string"
          },
          "portfolioId": {
            "description": "The identifier of the Portfolio to which the draft campaign is associated.",
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used.",
            "type": "string"
          }
        }
      },
      "SBVideoDraftCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/SBDraftKeywordsNegativeKeywords"
          }
        ],
        "description": "SB create video campaign with keywords",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBVideoDraftCampaignWithTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/SBDraftAllTargetingClauses"
          }
        ],
        "description": "SB create video campaign with targets",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "SBVideoListCampaignItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "properties": {
              "creative": {
                "$ref": "#/components/schemas/SBVideoCreative"
              },
              "landingPage": {
                "$ref": "#/components/schemas/SBDetailPageLandingPage"
              },
              "supplySource": {
                "$ref": "#/components/schemas/SupplySource"
              }
            },
            "type": "object"
          }
        ]
      },
      "SBVideoUpdateDraftCampaignRequestCommon": {
        "allOf": [
          {
            "properties": {
              "brandEntityId": {
                "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource.",
                "type": "string",
                "writeOnly": true
              },
              "budget": {
                "description": "The budget associated with the draft campaign.",
                "type": "number"
              },
              "budgetType": {
                "$ref": "#/components/schemas/BudgetType"
              },
              "creative": {
                "$ref": "#/components/schemas/SBVideoCreative"
              },
              "draftCampaignId": {
                "description": "The identifier of the draft campaign.",
                "type": "integer"
              },
              "endDate": {
                "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously.",
                "type": "string"
              },
              "name": {
                "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated.",
                "type": "string"
              },
              "portfolioId": {
                "description": "The identifier of the Portfolio to which the draft campaign is associated.",
                "format": "int64",
                "type": "integer"
              },
              "startDate": {
                "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "budget",
              "budgetType"
            ],
            "type": "object"
          }
        ]
      },
      "SBVideoUpdateDraftCampaignRequestWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestCommon"
          },
          {
            "properties": {
              "keywords": {
                "description": "An array of keywords associated with the campaign.",
                "items": {
                  "properties": {
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    },
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              },
              "negativeKeywords": {
                "description": "An array of negative keywords associated with the campaign.",
                "items": {
                  "properties": {
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "writeOnly": true
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "draftCampaignId"
        ]
      },
      "SBVideoUpdateDraftCampaignRequestWithProductTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBTargetsNegativeTargets"
          }
        ],
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "ShopperSegmentBiddingControls": {
        "properties": {
          "bidAdjustments": {
            "description": "List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present. `Not supported for video campaigns`",
            "items": {
              "$ref": "#/components/schemas/BidAdjustmentV3_3"
            },
            "maxItems": 4,
            "minItems": 0,
            "type": "array"
          },
          "bidOptimizationStrategy": {
            "$ref": "#/components/schemas/BidOptimizationStrategy"
          }
        }
      },
      "SpooferError": {
        "properties": {
          "SpooferError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "StartDate": {
        "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.",
        "nullable": true,
        "pattern": "^\\d{8}$",
        "type": "string"
      },
      "State": {
        "enum": [
          "enabled",
          "paused",
          "archived"
        ],
        "type": "string"
      },
      "SupplySource": {
        "description": "(As of 05/28/2024, `STREAMING_VIDEO` is deprecated). The supply source of the campaign. Use `AMAZON` for placements on Amazon website. Use `STREAMING_VIDEO` for off-site video placements such as IMDb TV. Default value is `AMAZON`",
        "enum": [
          "AMAZON",
          "STREAMING_VIDEO"
        ],
        "type": "string",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "TargetError": {
        "properties": {
          "TargetError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "properties": {
                  "matchType": {
                    "type": "string"
                  },
                  "maxTargets": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "targetType": {
                    "type": "string"
                  },
                  "validStates": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "x-amazon-advertising-package": "SBPublicAPISwagger"
      },
      "ThemeType": {
        "description": "The theme target type.\n- KEYWORDS_RELATED_TO_YOUR_BRAND - keywords related to brands.\n- KEYWORDS_RELATED_TO_YOUR_LANDING_PAGES - keywords related to your landing pages.\n- Note: Additional theme types may be added in the future.",
        "type": "string"
      },
      "UploadLocation": {
        "description": "The url to upload the media. The url expires in 15 minutes. The upload location only supports `PUT` HTTP Method to upload the media content.",
        "type": "string"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http"
      },
      "oauth2AuthorizationCode": {
        "description": "Login with Amazon. For more information see [Login with Amazon authorization code grant](https://developer.amazon.com/docs/login-with-amazon/authorization-code-grant.html).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.amazon.com/ap/oa",
            "scopes": {
              "cpc_advertising:campaign_management": "Modify your advertising campaigns and access performance data"
            },
            "tokenUrl": "https://api.amazon.com/auth/o2/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "name": "Amazon Ads API Support",
      "url": "https://amzn-clicks.atlassian.net/servicedesk/customer/portals"
    },
    "description": "Use the Amazon Ads API for Sponsored Brands for campaign, ad group, keyword, negative keyword, drafts, Stores, landing pages, and Brands management operations. For more information about Sponsored Brands, see the [Sponsored Brands Support Center](https://advertising.amazon.com/help#GQFZA83P55P747BZ). For onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/v3/guides/account_setup) topic. ",
    "license": {
      "name": "Amazon Ads API License Agreement",
      "url": "https://advertising.amazon.com/API/docs/license-agreement"
    },
    "title": "Amazon Ads API - Sponsored Brands",
    "version": "3.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/brands": {
      "get": {
        "description": "Gets an array of Brand data objects for the Brand associated with the profile ID passed in the header. For more information about Brands, see [Brand Services](https://brandservices.amazon.com/).",
        "operationId": "getBrands",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The returned array is filtered to include only brands with brand type set to one of the values in the specified comma-delimited list. Returns all brands if not specified.",
            "in": "query",
            "name": "brandTypeFilter",
            "schema": {
              "$ref": "#/components/schemas/BrandType"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.brand.v3+json": {
                "schema": {
                  "items": {
                    "properties": {
                      "brandEntityId": {
                        "description": "The Brand entity identifier available exclusively for seller advertisers.",
                        "type": "string"
                      },
                      "brandId": {
                        "description": "The Brand identifier.",
                        "type": "string"
                      },
                      "brandRegistryName": {
                        "description": "The Brand name.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful operation."
          }
        },
        "summary": "getBrands",
        "tags": [
          "Brands"
        ]
      }
    },
    "/media/complete": {
      "put": {
        "description": "The API should be called once the media is uploaded to the location provided by the /media/upload API endpoint. The API creates a Media resource for the uploaded media. Media resource is comprised of Media Identifier. The Media Identifier can be used to attach media to Ad Program (Sponsored Brands).\n\nThe API internally kicks off the asynchronous validation and processing workflow of the uploaded media. As a result, Media may not be immediately available for usage (to create Sponsored Brands Video Campaign) as soon as the response is received. See /media/describe API doc for instructions on when media is ready for campaign creation.",
        "operationId": "completeUpload",
        "parameters": [
          {
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "uploadLocation": {
                    "$ref": "#/components/schemas/UploadLocation"
                  },
                  "version": {
                    "description": "The version id of the uploaded media. The upload location retrieved from /media/upload API supports versioning and returns version id in the upload response through `x-amz-version-id` header. API user can explicitly specify the version id corresponding to an upload through `version` property. `version` is optional and if it is not specified, media corresponding to the most recent version at the time of API call will be used.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The  upload location",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mediaId": {
                      "$ref": "#/components/schemas/MediaId"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Media Resource"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            },
            "description": "Resource not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "The API is used to notify that the upload is completed.",
        "tags": [
          "Media"
        ]
      }
    },
    "/media/describe": {
      "get": {
        "description": "API to poll for media status.\nIn order to attach media to campaign, media should be in either `PendingDeepValidation` or `Available` status.\n\n`Available` status guarantees that media has completed processing and published for usage.\n\nThough media can be attached to campaign once the status of the media transitions to `PendingDeepValidation`, media could still fail additional validation and transition to `Failed` status. For example in the context of SBV, SBV campaign can be created when status transitions to `PendingDeepValidation`, it could result in SBV campaign to be rejected later if media transitions to `Failed` status.",
        "operationId": "describeMedia",
        "parameters": [
          {
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Media Identifier",
            "in": "query",
            "name": "mediaId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "properties": {
                    "mediaId": {
                      "$ref": "#/components/schemas/MediaId"
                    },
                    "originalMediaUrl": {
                      "description": "This is a signed URL which returns the original media in .mp4 file extension. The URL is only active for 7 days and requires to be regenerated if the video is not downloaded within 7 days. If you try to upload the downloaded video using the Asset Library API and get an error, then please retry upload after changing the file extension to .mov.",
                      "type": "string"
                    },
                    "publishedMediaUrl": {
                      "description": "The preview URL of the media. It is only available when status is `Available`.",
                      "type": "string"
                    },
                    "status": {
                      "$ref": "#/components/schemas/MediaStatus"
                    },
                    "statusMetadata": {
                      "items": {
                        "description": "Additional status metadata. It is only available when status is `Failed` and `statusMetadata` provides additional detail on why media status is `Failed`. `statusMetadata` is comprised of code and message.",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Media Resource"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            },
            "description": "Resource not found"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "API to poll for media status",
        "tags": [
          "Media"
        ]
      }
    },
    "/pageAsins": {
      "get": {
        "description": "Note that for sellers, the addresss must be a Store page. Vendors may also specify a custom landing page address. Only the `ASINs` that are directly associated on creation with a Store landing page are returned by this API. Any other `ASINs` that are not directly associated to the Store landing page or are listed on other pages are not returned by this API. This includes `ASINs` that are on Dynamic widgets, product selections, and featured deals widgets.",
        "operationId": "listAsins",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "For sellers, the address of a Store page. Vendors may also specify the address of a custom landing page. For more information, see the [Stores section](https://advertising.amazon.com/help#GPRM3ZHEXEY5RBFZ) of the Amazon Ads support center.",
            "in": "query",
            "name": "pageUrl",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.pageasins.v3+json": {
                "schema": {
                  "properties": {
                    "asinList": {
                      "description": "An array of ASINs. Note that this field is present only if there were no errors during the request. If there were errors, the `code` field is the enumerated error, and the `details` field contains a human-readable description of the error.",
                      "items": {
                        "description": "A single ASIN.",
                        "type": "string"
                      },
                      "readOnly": false,
                      "type": "array"
                    },
                    "code": {
                      "description": "The enumerated response code.\n| Code | Description |\n|------|--------|\n|SUCCESS| The request was successful. The `asinList` field includes all available ASINs.|\n|INVALID_ARGUMENT| The request was not successful because the address was not for a valid landing page.|\n|BAD_GATEWAY| The request failed because the landing page at the specified address did not have any ASINs.|",
                      "type": "string"
                    },
                    "details": {
                      "description": "A human-readable description of the `code` field.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Success."
          }
        },
        "summary": "Gets ASIN information for a specified address.",
        "tags": [
          "Landing page asins"
        ]
      }
    },
    "/sb/campaigns/budgetRules/recommendations": {
      "post": {
        "description": "A rule enables an automatic budget increase for a specified date range or for a special event. The response also includes a suggested budget increase for each special event.\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "operationId": "SBGetBudgetRulesRecommendation",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeaderOptional"
          },
          {
            "$ref": "#/components/parameters/accountIdHeaderOptional"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.sbbudgetrulesrecommendation.v3+json": {
              "schema": {
                "discriminator": {
                  "mapping": {
                    "EVENTS_FOR_EXISTING_CAMPAIGN": "#/components/schemas/SBBudgetRulesRecommendationEventRequest"
                  },
                  "propertyName": "recommendationType"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBBudgetRulesRecommendationEventRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbbudgetrulesrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBBudgetRulesRecommendationEventResponse"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "content": {
              "application/vnd.sbbudgetrulesrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBBudgetRulesRecommendationError"
                }
              }
            },
            "description": "Bad Request."
          },
          "429": {
            "content": {
              "application/vnd.sbbudgetrulesrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBBudgetRulesRecommendationError"
                }
              }
            },
            "description": "Too Many Requests. Request was rate-limited. Retry later."
          },
          "500": {
            "content": {
              "application/vnd.sbbudgetrulesrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBBudgetRulesRecommendationError"
                }
              }
            },
            "description": "Internal Server Error. Something went wrong on the server."
          }
        },
        "summary": "Gets a list of special events with suggested date range and suggested budget increase for a campaign specified by identifier.",
        "tags": [
          "Budget Rules Recommendations"
        ]
      }
    },
    "/sb/keywords": {
      "get": {
        "description": "**Note**: Keywords associated with BrandVideo ad groups are only available in v3.2 version.",
        "operationId": "listKeywords",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "Sets a zero-based offset into the requested set of keywords. Use in conjunction with the `count` parameter to control pagination of the returned array.",
            "in": "query",
            "name": "startIndex",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Sets the number of keywords in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten keywords set `startIndex=0` and `count=10`. To return the next ten keywords, set `startIndex=10` and `count=10`, and so on.",
            "in": "query",
            "name": "count",
            "schema": {
              "default": "max page size",
              "type": "integer"
            }
          },
          {
            "description": "The returned array is filtered to include only keywords with `matchType` set to one of the values in the specified comma-delimited list.",
            "in": "query",
            "name": "matchTypeFilter",
            "schema": {
              "$ref": "#/components/schemas/MatchType",
              "default": "broad,exact,phrase"
            }
          },
          {
            "description": "The returned array includes only keywords with the specified text.",
            "in": "query",
            "name": "keywordText",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The returned array is filtered to include only keywords with 'state' set to one of the values in the specified comma-delimited list.",
            "in": "query",
            "name": "stateFilter",
            "schema": {
              "default": "enabled,paused",
              "enum": [
                "enabled",
                "paused",
                "archived"
              ],
              "type": "string"
            }
          },
          {
            "description": "The returned array includes only keywords associated with campaigns matching those specified by identifier in the comma-delimited string.",
            "in": "query",
            "name": "campaignIdFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The returned array includes only keywords associated with ad groups matching those specified by identifier in the comma-delimited string.",
            "in": "query",
            "name": "adGroupIdFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The returned array includes only keywords with identifiers matching those specified in the comma-delimited string.",
            "in": "query",
            "name": "keywordIdFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the type of creative the campaign is associated with. To get keywords associated with non-video campaigns specify 'productCollection'. To get keywords associated with video campaigns, this must be set to 'video'. Returns all keywords if not specified.",
            "in": "query",
            "name": "creativeType",
            "schema": {
              "$ref": "#/components/schemas/CreativeType"
            }
          },
          {
            "description": "The returned array includes only keywords with locale matching those specified string.",
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbkeyword.v3+json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBKeyword"
                  },
                  "type": "array"
                }
              },
              "application/vnd.sbkeyword.v3.2+json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBKeyword"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success."
          }
        },
        "summary": "Gets an array of keywords, filtered by optional criteria.",
        "tags": [
          "Keywords"
        ]
      },
      "post": {
        "description": "Note that `state` can't be set at keyword creation. <br/>Note that keywords can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 keywords.",
        "operationId": "createKeywords",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of an existing ad group to which the keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "bid": {
                      "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [Keyword bid constraints by marketplace](https://advertising.amazon.com/API/docs/en-us/reference/concepts/limits#bid-constraints-by-marketplace).",
                      "type": "number"
                    },
                    "campaignId": {
                      "description": "The identifier of an existing campaign to which the keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "keywordText": {
                      "description": "The keyword text. The maximum number of words for this string is 10.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    },
                    "nativeLanguageKeyword": {
                      "description": "The unlocalized keyword text in the preferred locale of the advertiser.",
                      "type": "string"
                    },
                    "nativeLanguageLocale": {
                      "description": "The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.",
                      "type": "string"
                    }
                  }
                },
                "maximum": 100,
                "type": "array"
              }
            }
          },
          "description": "An array of keywords. <br/>Note the bid is only mutable when the keyword's corresponding campaign does not have any enabled optimization rule."
        },
        "responses": {
          "207": {
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            },
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request."
          }
        },
        "summary": "Creates one or more keywords.",
        "tags": [
          "Keywords"
        ]
      },
      "put": {
        "description": "Updates one or more targeting clauses. Operation supports a maximum list size of 100 keywords. <bold>Note</bold> that negative keywords can be updated on campaigns where campaign's serving status is not one of `archived`, `terminated`, `rejected`, or `ended`.",
        "operationId": "updateKeywords",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of an existing ad group to which the keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "bid": {
                      "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.",
                      "type": "number"
                    },
                    "campaignId": {
                      "description": "The identifier of an existing campaign to which the keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "keywordId": {
                      "description": "The identifier of the keyword.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "state": {
                      "$ref": "#/components/schemas/SBKeywordState"
                    }
                  },
                  "required": [
                    "keywordId",
                    "adGroupId",
                    "campaignId"
                  ]
                },
                "maximum": 100,
                "type": "array"
              }
            }
          },
          "description": "An array of keywords. <br/>Note the bid is only mutable when the keyword's corresponding campaign does not have any enabled optimization rule."
        },
        "responses": {
          "207": {
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            },
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request."
          }
        },
        "summary": "Updates one or more keywords.",
        "tags": [
          "Keywords"
        ]
      }
    },
    "/sb/keywords/{keywordId}": {
      "delete": {
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.",
        "operationId": "archiveKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "in": "path",
            "name": "keywordId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            },
            "description": "success"
          },
          "404": {
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request. Keyword identifier not found."
          }
        },
        "summary": "Archives a keyword specified by identifier.",
        "tags": [
          "Keywords"
        ]
      },
      "get": {
        "operationId": "getKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The identifier of an existing keyword.",
            "in": "path",
            "name": "keywordId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The returned array includes only keywords associated with locale matching those specified by identifier.",
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbkeyword.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeyword"
                }
              }
            },
            "description": "Success."
          },
          "404": {
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request. Keyword identifier not found."
          }
        },
        "summary": "Gets a keyword specified by identifier.",
        "tags": [
          "Keywords"
        ]
      }
    },
    "/sb/moderation/campaigns/{campaignId}": {
      "get": {
        "description": "Note that this resource is only available for campaigns in the US marketplace.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The campaign identifier.",
            "in": "path",
            "name": "campaignId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbmoderation.v3+json": {
                "schema": {
                  "properties": {
                    "campaignId": {
                      "description": "The campaign identifier.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "etaForModeration": {
                      "description": "Expected date and time by which moderation will be complete. Note that this field is present in the response only when `moderationStatus` is set to `IN_PROGRESS`.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "moderationStatus": {
                      "description": "The moderation status of the campaign.\n|Status|Description|\n|------|-----------|\n|APPROVED|Moderation for the campaign is complete.|\n|IN_PROGRESS|Moderation for the campaign is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.|\n|REJECTED|The campaign has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|",
                      "enum": [
                        "APPROVED",
                        "IN_PROGRESS",
                        "REJECTED"
                      ],
                      "type": "string"
                    },
                    "policyViolations": {
                      "description": "A list of policy violations for a campaign that has failed moderation. Note that this field is present in the response only when `moderationStatus` is set to `REJECTED`.",
                      "items": {
                        "properties": {
                          "policyDescription": {
                            "description": "A human-readable description of the policy.",
                            "example": "Advertising alcohol is not allowed",
                            "type": "string"
                          },
                          "policyLinkUrl": {
                            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
                            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol",
                            "format": "uri",
                            "type": "string"
                          },
                          "violatingAsinContents": {
                            "description": "Information about the specific ASIN in the campaign that violates the specified policy.",
                            "items": {
                              "properties": {
                                "asinEvidences": {
                                  "items": {
                                    "properties": {
                                      "asin": {
                                        "description": "The ASIN that violates the specified policy.",
                                        "example": "B0786PRKBP",
                                        "pattern": "[A-Za-z0-9]{10}",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "type": "array"
                                },
                                "moderatedComponent": {
                                  "description": "The ad component that includes the ASIN that violates the specified policy.",
                                  "example": "landingPageAsin",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "violatingImageContents": {
                            "description": "Information about the specific image that violates the specified policy.",
                            "items": {
                              "properties": {
                                "imageEvidences": {
                                  "items": {
                                    "properties": {
                                      "violatingImageCrop": {
                                        "properties": {
                                          "height": {
                                            "description": "The height of the content that violates the specified policy within the image.",
                                            "example": 50,
                                            "type": "integer"
                                          },
                                          "topLeftX": {
                                            "description": "The top left X-coordinate of the content that violates the specfied policy within the image.",
                                            "example": 24,
                                            "type": "integer"
                                          },
                                          "topLeftY": {
                                            "description": "The top left Y-coordinate of the content that violates the specfied policy within the image.",
                                            "example": 87,
                                            "type": "integer"
                                          },
                                          "width": {
                                            "description": "The width of the content that violates the specified policy within the image.",
                                            "example": 75,
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "type": "array"
                                },
                                "moderatedComponent": {
                                  "description": "The ad component that includes the image that violates the specified policy.",
                                  "example": "brandlogo",
                                  "type": "string"
                                },
                                "reviewedImageUrl": {
                                  "description": "Address of the image reviewed during moderation.",
                                  "example": "https://media-central.amazon.com/ejfkkfwkeclkmd.jpg",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "violatingTextContents": {
                            "description": "Information about the specific text that violates the specified policy in the campaign.",
                            "items": {
                              "properties": {
                                "moderatedComponent": {
                                  "description": "The ad component that includes the text that violates the specified policy.",
                                  "example": "headline",
                                  "type": "string"
                                },
                                "reviewedText": {
                                  "description": "The specific text reviewed during moderation.",
                                  "example": "Best alcohol money can buy",
                                  "type": "string"
                                },
                                "textEvidences": {
                                  "items": {
                                    "properties": {
                                      "violatingText": {
                                        "description": "The specific text determined to violate the specified policy in `reviewedText`.",
                                        "example": "alcohol",
                                        "type": "string"
                                      },
                                      "violatingTextPosition": {
                                        "properties": {
                                          "end": {
                                            "description": "Zero-based index into the text in `reviewedText` where the text specified in `violatingText` ends.",
                                            "example": 11,
                                            "type": "integer"
                                          },
                                          "start": {
                                            "description": "Zero-based index into the text in `reviewedText` where the text specified in `violatingText` starts.",
                                            "example": 5,
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "success"
          },
          "404": {
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested campaignId not found"
          }
        },
        "summary": "Gets the moderation result for a campaign specified by identifier.",
        "tags": [
          "Moderation"
        ]
      }
    },
    "/sb/negativeKeywords": {
      "get": {
        "description": "**Note**: Negative keywords associated with BrandVideo ad groups are only available in v3.2 version.",
        "operationId": "listNegativeKeywords",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "Sets a zero-based offset into the requested set of negative keywords. Use in conjunction with the `count` parameter to control pagination of the returned array.",
            "in": "query",
            "name": "startIndex",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Sets the number of negative keywords in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten negative keywords set `startIndex=0` and `count=10`. To return the next ten negative keywords, set `startIndex=10` and `count=10`, and so on.",
            "in": "query",
            "name": "count",
            "schema": {
              "default": "max page size",
              "type": "integer"
            }
          },
          {
            "description": "The returned array is filtered to include only negative keywords with `matchType` set to one of the values in the specified comma-delimited list.",
            "in": "query",
            "name": "matchTypeFilter",
            "schema": {
              "$ref": "#/components/schemas/NegativeMatchType"
            }
          },
          {
            "description": "The returned array includes only negative keywords with the specified text.",
            "in": "query",
            "name": "keywordText",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The returned array includes only negative keywords with `state` set to the specified value.",
            "in": "query",
            "name": "stateFilter",
            "schema": {
              "$ref": "#/components/schemas/NegativeState"
            }
          },
          {
            "description": "The returned array includes only negative keywords associated with campaigns matching those specified by identifier in the comma-delimited string.",
            "in": "query",
            "name": "campaignIdFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The returned array includes only negative keywords associated with ad groups matching those specified by identifier in the comma-delimited string.",
            "in": "query",
            "name": "adGroupIdFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The returned array includes only negative keywords with identifiers matching those specified in the comma-delimited string.",
            "in": "query",
            "name": "keywordIdFilter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the type of creative the campaign is associated with. To get negative keywords associated with non-video campaigns specify 'productCollection'. To get negative keywords associated with video campaigns, this must be set to 'video'. Returns all negative keywords if not specified.",
            "in": "query",
            "name": "creativeType",
            "schema": {
              "$ref": "#/components/schemas/CreativeType"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbnegativekeyword.v3+json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBNegativeKeyword"
                  },
                  "type": "array"
                }
              },
              "application/vnd.sbnegativekeyword.v3.2+json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBNegativeKeyword"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success."
          }
        },
        "summary": "Gets an array of negative keywords, filtered by optional criteria.",
        "tags": [
          "Negative keywords"
        ]
      },
      "post": {
        "description": "Creates one or more negative targeting clauses. Operation supports a maximum list size of 100 negative keywords. The `bid` and `state` can't be set at negative keyword creation. <br/>Note that negative keywords can be created on campaigns where campaign's serving status is not one of `archived`, `terminated`, `rejected`, or `ended`.\n<br>**Note** that negative keywords *can not* be recreated for a campaign if the negative keyword has previously been associated with a campaign and subsequently archived. ",
        "operationId": "createNegativeKeywords",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of the ad group to which the negative keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "campaignId": {
                      "description": "The identifier of the campaign to which the negative keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "keywordText": {
                      "description": "The keyword text. Maximum length is ten words if 'matchType' is 'negativeExact'. Maximum length is 4 words if 'matchType' is 'negativePhrase'",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  }
                },
                "maximum": 100,
                "type": "array"
              }
            }
          },
          "description": "An array of negative keywords."
        },
        "responses": {
          "207": {
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBKeywordResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request."
          }
        },
        "summary": "Creates one or more negative keywords.",
        "tags": [
          "Negative keywords"
        ]
      },
      "put": {
        "description": "Updates one or more targeting clauses. Operation supports a maximum list size of 100 negative keywords. <bold>Note</bold> that negative keywords can be updated on campaigns where campaign's serving status is not one of `archived`, `terminated`, `rejected`, or `ended`.",
        "operationId": "updateNegativeKeywords",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of the ad group to which the negative keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "campaignId": {
                      "description": "The identifier of the campaign to which the negative keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "keywordId": {
                      "description": "The identifier of the negative keyword.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "state": {
                      "$ref": "#/components/schemas/SBNegativeKeywordState"
                    }
                  }
                },
                "maximum": 100,
                "type": "array"
              }
            }
          },
          "description": "An array of negative keywords."
        },
        "responses": {
          "207": {
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBKeywordResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request."
          }
        },
        "summary": "Updates one or more negative keywords.",
        "tags": [
          "Negative keywords"
        ]
      }
    },
    "/sb/negativeKeywords/{keywordId}": {
      "delete": {
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.",
        "operationId": "archiveNegativeKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The identifier of an existing campaign.",
            "in": "path",
            "name": "keywordId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            },
            "description": "Success."
          },
          "404": {
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request. The specified negative keyword identifier was not found."
          }
        },
        "summary": "Archives a negative keyword specified by identifier.",
        "tags": [
          "Negative keywords"
        ]
      },
      "get": {
        "operationId": "getNegativeKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The identifier of an existing negative keyword.",
            "in": "path",
            "name": "keywordId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbnegativekeyword.v3+json": {
                "schema": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of the ad group to which the negative keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "campaignId": {
                      "description": "The identifier of the campaign to which the negative keyword is associated.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "keywordId": {
                      "description": "The identifier of the negative keyword.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "keywordText": {
                      "description": "The keyword text. Maximum length of string is ten words if `matchType` is set to `negativeExact`. Maximum length is 4 words if `matchType` is set to `negativePhrase`.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    },
                    "state": {
                      "$ref": "#/components/schemas/SBNegativeKeywordState"
                    }
                  }
                }
              }
            },
            "description": "Success."
          }
        },
        "summary": "Gets a negative keyword specified by identifier.",
        "tags": [
          "Negative keywords"
        ]
      }
    },
    "/sb/negativeTargets": {
      "post": {
        "operationId": "createNegativeTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "negativeTargets": {
                    "items": {
                      "$ref": "#/components/schemas/SBCreateNegativeTargetingClauseRequest"
                    },
                    "maxItems": 100,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "negativeTargets"
                ],
                "type": "object"
              }
            }
          },
          "description": "A list of negative targeting clauses for creation. <br/>Note that negative targeting clauses can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 negative targets."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbcreatenegativetargetsrequest.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCreateTargetsResponse"
                }
              }
            },
            "description": "A list of success and error results for targeting clauses submitted for creation."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Create one or more negative targets.",
        "tags": [
          "Negative product targeting"
        ]
      },
      "put": {
        "operationId": "updateNegativeTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "negativeTargets": {
                    "items": {
                      "$ref": "#/components/schemas/SBUpdateNegativeTargetingClauseRequest"
                    },
                    "maxItems": 100,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "A list of negative targets with updated values. <br/>Note that negative targeting clauses can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 negative targets."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.updatenegativetargetsresponse.v3+json": {
                "schema": {
                  "properties": {
                    "updateTargetErrorResults": {
                      "description": "Lists errors that occured during negative target update. Note that errors are correlated to negative target update requests by the `negativeTargetRequestIndex` field. This field corresponds to the order of the negative target in the request. For example, if `negativeTargetRequestIndex` is set to `2`, the values correlate to the third negative target object in the request.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "properties": {
                              "targetId": {
                                "$ref": "#/components/schemas/SBTargetId"
                              },
                              "targetRequestIndex": {
                                "$ref": "#/components/schemas/SBNegativeTargetRequestIndex"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "updateTargetSuccessResults": {
                      "description": "Lists the successfully updated negative targets. Note that negative targets in the response are correlated to negative targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third negative target object in the request.",
                      "items": {
                        "properties": {
                          "targetId": {
                            "$ref": "#/components/schemas/SBTargetId"
                          },
                          "targetRequestIndex": {
                            "$ref": "#/components/schemas/SBNegativeTargetRequestIndex"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of success and error results for negative targets submitted for update."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Updates one or more negative targets.",
        "tags": [
          "Negative product targeting"
        ]
      }
    },
    "/sb/negativeTargets/list": {
      "post": {
        "description": "**Note**: Negative targets associated with BrandVideo ad groups are only available in v3.2 version.",
        "operationId": "listNegativeTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRequest"
                  },
                  {
                    "properties": {
                      "filters": {
                        "description": "Restricts results to negative targets with the specified filters.  Filters are inclusive. Filters are joined using 'and' logic. Specify one each type of filter. Specifying multiples of the same type of filter results in an error.",
                        "items": {
                          "anyOf": [
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CREATIVE_TYPE` to filter by creative type. If no filter is specified, all negative targets will be returned.",
                                      "enum": [
                                        "CREATIVE_TYPE"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of creative types.",
                                      "items": {
                                        "enum": [
                                          "productCollection",
                                          "video"
                                        ],
                                        "type": "string"
                                      },
                                      "maxItems": 2,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `TARGETING_STATE` to filter by negative target state.",
                                      "enum": [
                                        "TARGETING_STATE"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of negative target states.",
                                      "items": {
                                        "$ref": "#/components/schemas/SBNegativeTargetState"
                                      },
                                      "maxItems": 3,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CAMPAIGN_ID` to filter by campaign identifiers.",
                                      "enum": [
                                        "CAMPAIGN_ID"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of campaign identifiers.",
                                      "items": {
                                        "description": "An existing campaign identifier.",
                                        "type": "string"
                                      },
                                      "maxItems": 100,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `AD_GROUP_ID` to filter by ad group identifier.",
                                      "enum": [
                                        "AD_GROUP_ID"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of ad group identifiers.",
                                      "items": {
                                        "description": "An existing ad group identifier.",
                                        "type": "string"
                                      },
                                      "maxItems": 100,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          ]
                        },
                        "maxItems": 3,
                        "minItems": 0,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "A set of filters."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sblistnegativetargetsresponse.v3+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "properties": {
                        "negativeTargets": {
                          "items": {
                            "$ref": "#/components/schemas/SBTargetingClause"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "application/vnd.sblistnegativetargetsresponse.v3.2+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "properties": {
                        "negativeTargets": {
                          "items": {
                            "$ref": "#/components/schemas/SBTargetingClause"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "A list of negative targets."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Gets a list of product negative targets associated with the client identifier passed in the authorization header, filtered by specified criteria.",
        "tags": [
          "Negative product targeting"
        ]
      }
    },
    "/sb/negativeTargets/{negativeTargetId}": {
      "delete": {
        "operationId": "archiveNegativeTarget",
        "parameters": [
          {
            "in": "path",
            "name": "negativeTargetId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBNegativeTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbnegativetarget.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBTargetingClauseResponse"
                }
              }
            },
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Archives a negative target specified by identifier. Note that archiving is permanent, and once a negative target has been archived it can't be made active again.",
        "tags": [
          "Negative product targeting"
        ]
      },
      "get": {
        "operationId": "getNegativeTarget",
        "parameters": [
          {
            "description": "The identifier of an existing negative target.",
            "in": "path",
            "name": "negativeTargetId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBNegativeTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbnegativetarget.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBNegativeTargetingClause"
                }
              }
            },
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Gets a negative target specified by identifier.",
        "tags": [
          "Negative product targeting"
        ]
      }
    },
    "/sb/recommendations/bids": {
      "post": {
        "description": "Get a list of bid recommendation objects for a specified list of keywords or products.",
        "operationId": "getBidsRecommendations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "adFormat": {
                    "$ref": "#/components/schemas/AdFormat"
                  },
                  "campaignId": {
                    "description": "The identifier of the campaign for which bid recommendations are created.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "costType": {
                    "description": "Optional. Support `CPC` (cost per click) and `VCPM` (cost per thousand viewable impressions).\n| costType | goal | Expected result |\n|----------|------|-----------------|\n| Empty | Empty | Recommendation will be generated for costType= `CPC` and goal=`PAGE_VISIT`.\n| Specified | Empty | It will return error and no recommendation will be generated.\n| Empty | Specified | It will use default costType based on goal selection. e.g. goal=`BRAND_IMPRESSION_SHARE` then it will use costType = `VCPM` to generate recommendation.\n| Specified | Specified | The recommendation will be based on selected goal and costType. If the mismatch then it will generate an error.",
                    "type": "string"
                  },
                  "goal": {
                    "$ref": "#/components/schemas/Goal"
                  },
                  "keywords": {
                    "description": "Sum of the sizes of (targets + keywords + themeTypes) arrays should be <= 100",
                    "items": {
                      "$ref": "#/components/schemas/SBBidRecommendationKeyword"
                    },
                    "maxItems": 100,
                    "type": "array"
                  },
                  "targets": {
                    "description": "Sum of the sizes of (targets + keywords + themeTypes) arrays should be <= 100",
                    "items": {
                      "$ref": "#/components/schemas/SBTargetingExpressions"
                    },
                    "maxItems": 100,
                    "type": "array"
                  },
                  "themeTypes": {
                    "description": "Sum of the sizes of (targets + keywords + themeTypes) arrays should be <= 100",
                    "items": {
                      "$ref": "#/components/schemas/ThemeType"
                    },
                    "maxItems": 100,
                    "minItems": 0,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "A list of keywords or targeting expressions for which to generate bid recommendations. Note that if a value is specified for the `campaignId` field, the past performance data for the campaign may be use to create bid recommendations."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbbidsrecommendation.v3+json": {
                "schema": {
                  "properties": {
                    "keywordsBidsRecommendationErrorResults": {
                      "description": "Lists errors that occurred during creation of keyword bid recommendations.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "properties": {
                              "keyword": {
                                "$ref": "#/components/schemas/SBKeywordExpression"
                              },
                              "keywordIndex": {
                                "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "keywordsBidsRecommendationSuccessResults": {
                      "description": "Lists the bid recommendations for the keywords specified in the request.",
                      "items": {
                        "properties": {
                          "keyword": {
                            "properties": {
                              "keywordText": {
                                "description": "The text of the keyword.",
                                "type": "string"
                              },
                              "matchType": {
                                "$ref": "#/components/schemas/MatchType"
                              }
                            },
                            "type": "object"
                          },
                          "keywordIndex": {
                            "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                          },
                          "recommendationId": {
                            "description": "The identifier of the keyword bid recommendation.",
                            "type": "string"
                          },
                          "recommendedBid": {
                            "$ref": "#/components/schemas/RecommendedBid"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "targetsBidsRecommendationErrorResults": {
                      "description": "Lists errors that occurred during creation of target bid recommendations.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "properties": {
                              "targets": {
                                "$ref": "#/components/schemas/SBTargetingExpressions"
                              },
                              "targetsIndex": {
                                "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "targetsBidsRecommendationSuccessResults": {
                      "description": "Lists the bid recommendations for the keywords or targets specified in the request.",
                      "items": {
                        "properties": {
                          "recommendationId": {
                            "description": "The identifier of the target bid recommendation."
                          },
                          "recommendedBid": {
                            "$ref": "#/components/schemas/RecommendedBid"
                          },
                          "targets": {
                            "$ref": "#/components/schemas/SBTargetingExpressions"
                          },
                          "targetsIndex": {
                            "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "themesRecommendationErrorResults": {
                      "description": "Lists errors that occurred during creation of theme targets bid recommendations.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "properties": {
                              "themeIndex": {
                                "$ref": "#/components/schemas/SBBidRecommendationThemeIndex"
                              },
                              "themeType": {
                                "$ref": "#/components/schemas/ThemeType"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    },
                    "themesRecommendationSuccessResults": {
                      "description": "Lists the theme targets recommendations for the theme targets specified in the request.",
                      "items": {
                        "properties": {
                          "recommendationId": {
                            "description": "The identifier of the target bid recommendation."
                          },
                          "recommendedBid": {
                            "$ref": "#/components/schemas/RecommendedBid"
                          },
                          "themeIndex": {
                            "$ref": "#/components/schemas/SBBidRecommendationThemeIndex"
                          },
                          "themeType": {
                            "$ref": "#/components/schemas/ThemeType"
                          }
                        },
                        "type": "object"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of bid recommendations."
          }
        },
        "tags": [
          "Bid recommendations"
        ]
      }
    },
    "/sb/recommendations/keyword": {
      "post": {
        "description": "Gets an array of keyword recommendation objects for a set of ASINs included either on a landing page or a Stores page. Vendors may also specify a custom landing page.\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "operationId": "getKeywordRecommendations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.sbkeywordrecommendation.v3+json": {
              "examples": {
                "ASIN Request": {
                  "value": {
                    "asins": [
                      "asin1",
                      "asin2",
                      "asin3"
                    ],
                    "creativeType": "PRODUCT_COLLECTION",
                    "goal": "PAGE_VISIT",
                    "locale": "zh_CN",
                    "maxNumSuggestions": "100"
                  }
                },
                "URL Request": {
                  "value": {
                    "creativeType": "VIDEO",
                    "goal": "BRAND_IMPRESSION_SHARE",
                    "locale": "zh_CN",
                    "maxNumSuggestions": "100",
                    "url": "www.amazon.com/sample_landing_page"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBKeywordRecommendationRequestAsin"
                  },
                  {
                    "$ref": "#/components/schemas/SBKeywordRecommendationRequestUrl"
                  }
                ]
              }
            }
          },
          "description": "**Must contain exactly only one of** \n\n 1.) An array of ASINs for which keyword recommendations are generated. \n\n 2.) The URL of a Stores page. Vendors may also specify the URL of a custom landing page. The products on the landing page are used to generate keyword recommendations. \n\n Optional parameters include the max number of suggestions and locale for keyword translations. Supported locales include: Simplified Chinese (locale: “zh_CN”) for US, UK and CA. English (locale:  “en_GB”) for DE, FR, IT and ES. If locale is invalid or unsupported, no translations will be returned."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbkeywordrecommendation.v3+json": {
                "example": [
                  {
                    "matchType": "PHRASE",
                    "recommendationId": "1111111111",
                    "searchTermImpressionRank": 10,
                    "searchTermImpressionShare": 1,
                    "translation": "跑鞋",
                    "type": "addKeyword",
                    "value": "running shoes"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SBKeywordSuggestion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful recommendations response"
          },
          "400": {
            "content": {
              "application/vnd.sbkeywordrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordRecommendationError"
                }
              }
            },
            "description": "Bad Request."
          },
          "429": {
            "content": {
              "application/vnd.sbkeywordrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordRecommendationError"
                }
              }
            },
            "description": "Too Many Requests - Request was rate-limited. Retry later"
          },
          "500": {
            "content": {
              "application/vnd.sbkeywordrecommendation.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordRecommendationError"
                }
              }
            },
            "description": "Internal Server SB Keyword Recommendations Error - Something went wrong on the server. Retry later and report an SB Keyword Recommendations Error if unresolved."
          }
        },
        "summary": "Gets keyword recommendations",
        "tags": [
          "Keyword Recommendations"
        ]
      }
    },
    "/sb/recommendations/targets/brand": {
      "post": {
        "description": "The Brand suggestions are based on a list of either category identifiers or keywords passed in the request. It is not valid to specify both category identifiers and keywords in the request.",
        "operationId": "getBrandRecommendations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "categoryId": {
                        "description": "The category identifier for which to get recommendations.",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "properties": {
                      "keyword": {
                        "description": "The keyword for which to get recommendations.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbbrandrecommendationsresponse.v3.1+json": {
                "schema": {
                  "properties": {
                    "brandRecommendationResults": {
                      "items": {
                        "$ref": "#/components/schemas/SBBrandResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "success"
          }
        },
        "summary": "Gets a list of brand suggestions.",
        "tags": [
          "Targeting recommendations"
        ]
      }
    },
    "/sb/recommendations/targets/category": {
      "post": {
        "description": "Recommendations are based on the ASINs that are passed in the request.",
        "operationId": "getTargetingCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "Return the categories in the specified locale.",
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "enum": [
                "ar_AE",
                "de_DE",
                "en_AE",
                "en_AU",
                "en_CA",
                "en_GB",
                "en_IN",
                "en_SG",
                "en_US",
                "es_ES",
                "es_MX",
                "fr_CA",
                "fr_FR",
                "hi_IN",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "nl_NL",
                "pl_PL",
                "pt_BR",
                "sv_SE",
                "ta_IN",
                "th_TH",
                "tr_TR",
                "vi_VN",
                "zh_CN"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "asins": {
                    "description": "A list of ASINs.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "supplySource": {
                    "description": "(As of 05/28/2024, `STREAMING_VIDEO` is deprecated). The supply source of the campaign. Use `AMAZON` for placements on Amazon website. Use `STREAMING_VIDEO` for off-site video placements such as IMDb TV. Default value is `AMAZON`.",
                    "enum": [
                      "AMAZON",
                      "STREAMING_VIDEO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "List of ASINs."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbcategoryrecommendationsresponse.v3.2+json": {
                "schema": {
                  "properties": {
                    "categoryRecommendationResults": {
                      "items": {
                        "$ref": "#/components/schemas/SBCategoryResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of category targeting recommendations."
          }
        },
        "summary": "Gets a list of recommended categories for targeting.",
        "tags": [
          "Targeting recommendations"
        ]
      }
    },
    "/sb/recommendations/targets/product/list": {
      "post": {
        "description": "Recommendations are based on the ASINs that are passed in the request.",
        "operationId": "getProductRecommendations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRecommendationsRequest"
                  },
                  {
                    "properties": {
                      "filters": {
                        "description": "Restricts recommendations to the criteria specified in the filters.",
                        "items": {
                          "anyOf": [
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "enum": [
                                        "ASINS"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of ASINs.",
                                      "items": {
                                        "description": "An ASIN.",
                                        "type": "string"
                                      },
                                      "maxItems": 100,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "A list of ASINs."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbproductrecommendationsresponse.v3.1+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "properties": {
                        "recommendedProducts": {
                          "items": {
                            "properties": {
                              "recommendedTargetAsin": {
                                "description": "The recommended target ASIN.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "A list of product targeting recommendations."
          }
        },
        "summary": "Gets a list of recommended products for targeting.",
        "tags": [
          "Targeting recommendations"
        ]
      }
    },
    "/sb/targets": {
      "post": {
        "operationId": "createTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targets": {
                    "items": {
                      "$ref": "#/components/schemas/SBCreateTargetingClauseRequest"
                    },
                    "maxItems": 100,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "targets"
                ],
                "type": "object"
              }
            }
          },
          "description": "A list of targeting clauses for creation. <br/>Note that targets can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 targets. <br/>Note the bid is only mutable when the keyword's corresponding campaign does not have any enabled optimization rule."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbcreatetargetsresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCreateTargetsResponse"
                }
              }
            },
            "description": "A list of success and error results for targeting clauses submitted for creation."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Create one or more targets.",
        "tags": [
          "Product targeting"
        ]
      },
      "put": {
        "operationId": "updateTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targets": {
                    "items": {
                      "$ref": "#/components/schemas/SBUpdateTargetingClauseRequest"
                    },
                    "maxItems": 100,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "targets"
                ],
                "type": "object"
              }
            }
          },
          "description": "A list of targets with updated values. <br/>Note that targets can be updated on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 targets. <br/>Note the bid is only mutable when the keyword's corresponding campaign does not have any enabled optimization rule."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.updatetargetsresponse.v3+json": {
                "schema": {
                  "properties": {
                    "updateTargetErrorResults": {
                      "description": "Lists errors that occured during target update. Note that errors are correlated to target update requests by the `targetRequestIndex` field. This field corresponds to the order of the target in the request. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request array.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "properties": {
                              "targetId": {
                                "$ref": "#/components/schemas/SBTargetId"
                              },
                              "targetRequestIndex": {
                                "$ref": "#/components/schemas/SBTargetRequestIndex"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "updateTargetSuccessResults": {
                      "description": "Lists the successfully updated targets. Note that targets in the response are correlated to targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request.",
                      "items": {
                        "properties": {
                          "targetId": {
                            "$ref": "#/components/schemas/SBTargetId"
                          },
                          "targetRequestIndex": {
                            "$ref": "#/components/schemas/SBTargetRequestIndex"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of success and error results for targets submitted for update."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Updates one or more targets.",
        "tags": [
          "Product targeting"
        ]
      }
    },
    "/sb/targets/list": {
      "post": {
        "description": "Gets a list of product targets associated with the client identifier passed in the authorization header, filtered by specified criteria.\n\n**Note**: Product targets associated with BrandVideo ad groups are only available in v3.2 version.",
        "operationId": "listTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRequest"
                  },
                  {
                    "properties": {
                      "filters": {
                        "description": "Restricts results to targets with the specified filters.  Filters are inclusive. Filters are joined using 'and' logic. Specify one type of each filter. Specifying multiples of the same type of filter results in an error.",
                        "items": {
                          "anyOf": [
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CREATIVE_TYPE` to filter by creative type. If no filter is specified, all targets will be returned.",
                                      "enum": [
                                        "CREATIVE_TYPE"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of creative types.",
                                      "items": {
                                        "enum": [
                                          "productCollection",
                                          "video"
                                        ],
                                        "type": "string"
                                      },
                                      "maxItems": 2,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `TARGETING_STATE` to filter by target state.",
                                      "enum": [
                                        "TARGETING_STATE"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of target states.",
                                      "items": {
                                        "enum": [
                                          "archived",
                                          "paused",
                                          "enabled"
                                        ],
                                        "type": "string"
                                      },
                                      "maxItems": 5,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CAMPAIGN_ID` to filter by campaign identifiers.",
                                      "enum": [
                                        "CAMPAIGN_ID"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of campaign identifiers.",
                                      "items": {
                                        "description": "A campaign identifier.",
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `AD_GROUP_ID` to filter by ad group identifier.",
                                      "enum": [
                                        "AD_GROUP_ID"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "values": {
                                      "description": "A list of ad group identifiers.",
                                      "items": {
                                        "$ref": "#/components/schemas/SBAdGroupId"
                                      },
                                      "maxItems": 100,
                                      "minItems": 1,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          ],
                          "maxItems": 3,
                          "minItems": 0
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "A set of filters."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sblisttargetsresponse.v3+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "properties": {
                        "targets": {
                          "items": {
                            "properties": {
                              "adGroupId": {
                                "description": "The identifier of the ad group to which the target is associated.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "bid": {
                                "$ref": "#/components/schemas/Bid"
                              },
                              "campaignId": {
                                "description": "The identifier of the campaign to which the target is associated.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "expressions": {
                                "items": {
                                  "$ref": "#/components/schemas/SBExpression"
                                },
                                "type": "array"
                              },
                              "resolvedExpressions": {
                                "items": {
                                  "$ref": "#/components/schemas/SBResolvedExpression"
                                },
                                "type": "array"
                              },
                              "state": {
                                "$ref": "#/components/schemas/SBProductTargetState"
                              },
                              "targetId": {
                                "description": "The target identifier.",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "application/vnd.sblisttargetsresponse.v3.2+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "properties": {
                        "targets": {
                          "items": {
                            "properties": {
                              "adGroupId": {
                                "description": "The identifier of the ad group to which the target is associated.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "bid": {
                                "$ref": "#/components/schemas/Bid"
                              },
                              "campaignId": {
                                "description": "The identifier of the campaign to which the target is associated.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "expressions": {
                                "items": {
                                  "$ref": "#/components/schemas/SBExpression"
                                },
                                "type": "array"
                              },
                              "resolvedExpressions": {
                                "items": {
                                  "$ref": "#/components/schemas/SBResolvedExpression"
                                },
                                "type": "array"
                              },
                              "state": {
                                "$ref": "#/components/schemas/SBProductTargetState"
                              },
                              "targetId": {
                                "description": "The target identifier.",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "A list of targeting clauses."
          }
        },
        "tags": [
          "Product targeting"
        ]
      }
    },
    "/sb/targets/{targetId}": {
      "delete": {
        "description": "The identifier of an existing target.",
        "operationId": "archiveTarget",
        "parameters": [
          {
            "in": "path",
            "name": "targetId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbtargetresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBTargetingClauseResponse"
                }
              }
            },
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Archives a target specified by identifier. Note that archiving is permanent, and once a target has been archived it can't be made active again.",
        "tags": [
          "Product targeting"
        ]
      },
      "get": {
        "operationId": "getTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The identifier of an existing target.",
            "in": "path",
            "name": "targetId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbtarget.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBTargetingClause"
                }
              }
            },
            "description": "success"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Gets a target specified by identifier.",
        "tags": [
          "Product targeting"
        ]
      }
    },
    "/sb/themes": {
      "post": {
        "description": "Note that this endpoint does not support for **Author profiles**.",
        "operationId": "sbCreateThemes",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "themes": {
                    "items": {
                      "$ref": "#/components/schemas/SBCreateThemesRequest"
                    },
                    "maxItems": 100,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "themes"
                ],
                "type": "object"
              }
            }
          },
          "description": "A list of theme targets for creation. <br/>Note that theme targets can be created on multi-adGroups campaigns and where campaign serving status is not one of `archived`, `terminated`, `rejected`, or `ended` and adgroup state is not 'archived'. <br/>Note that this operation supports a maximum list size of 100 theme targets and only one target can be created for each themeType per adGroup. <br/>Note the bid is only mutable when the keyword's corresponding campaign does not have any enabled optimization rule."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbthemescreateresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCreateThemesResponse"
                }
              }
            },
            "description": "A list of success and error results for theme targets submitted for creation."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Create one or more theme targets.",
        "tags": [
          "Theme targeting"
        ]
      },
      "put": {
        "description": "Note that this endpoint does not support for **Author profiles**.",
        "operationId": "sbUpdateThemes",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "themes": {
                    "items": {
                      "$ref": "#/components/schemas/SBUpdateThemesRequest"
                    },
                    "maxItems": 100,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "themes"
                ],
                "type": "object"
              }
            }
          },
          "description": "A list of theme targets with updated values. <br/>Note that theme targets can be updated on multi-adGroups campaigns and where campaign serving status is not one of `archived`, `terminated`, `rejected`, or `ended` and adgroup state is not 'archived'. <br/>Note that this operation supports a maximum list size of 100 theme targets. Also theme target can not be archived. <br/>Note the bid is only mutable when the keyword's corresponding campaign does not have any enabled optimization rule."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbthemesupdateresponse.v3+json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "Lists errors that occurred during theme target update. Note that errors are correlated to theme target update requests by the `index` field. This field corresponds to the order of the theme target in the request. For example, if `index` is set to `2`, the values correlate to the third theme target object in the request array.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "properties": {
                              "index": {
                                "$ref": "#/components/schemas/SBTargetRequestIndex"
                              },
                              "themeId": {
                                "$ref": "#/components/schemas/SBThemeId"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "maxItems": 100,
                      "minItems": 0,
                      "type": "array"
                    },
                    "success": {
                      "description": "Lists the successfully updated theme targets. Note that theme targets in the response are correlated to theme targets in the request using the `index` field. For example, if `index` is set to `2`, the values correlate to the third theme target object in the request.",
                      "items": {
                        "properties": {
                          "index": {
                            "$ref": "#/components/schemas/SBTargetRequestIndex"
                          },
                          "themeId": {
                            "$ref": "#/components/schemas/SBThemeId"
                          }
                        },
                        "type": "object"
                      },
                      "maxItems": 100,
                      "minItems": 0,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of success and error results for theme targets submitted for update."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        },
        "summary": "Updates one or more theme targets.",
        "tags": [
          "Theme targeting"
        ]
      }
    },
    "/sb/themes/list": {
      "post": {
        "description": "Note that this endpoint does not support for **Author profiles**. Gets a list of theme targets associated with the client identifier passed in the authorization header, filtered by specified criteria.",
        "operationId": "sbListThemes",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRequest"
                  },
                  {
                    "properties": {
                      "adGroupIdFilter": {
                        "description": "A list of ad group identifiers.",
                        "properties": {
                          "include": {
                            "items": {
                              "description": "An ad group identifier.",
                              "maxItems": 100,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      },
                      "campaignIdFilter": {
                        "description": "A list of campaign identifiers.",
                        "properties": {
                          "include": {
                            "items": {
                              "description": "A campaign identifier.",
                              "maxItems": 100,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      },
                      "stateFilter": {
                        "description": "A list of theme target states.",
                        "properties": {
                          "include": {
                            "items": {
                              "default": "enabled,paused",
                              "enum": [
                                "paused",
                                "enabled",
                                "archived"
                              ],
                              "maxItems": 3,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      },
                      "themeIdFilter": {
                        "description": "A list of theme targets identifiers.",
                        "properties": {
                          "include": {
                            "items": {
                              "description": "An theme target identifier.",
                              "maxItems": 100,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      },
                      "themeTypeFilter": {
                        "description": "A list of theme target type.",
                        "properties": {
                          "include": {
                            "items": {
                              "$ref": "#/components/schemas/ThemeType"
                            },
                            "maxItems": 2,
                            "minItems": 1,
                            "type": "array"
                          }
                        }
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "A set of filters."
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.sbthemeslistresponse.v3+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "properties": {
                        "themes": {
                          "items": {
                            "$ref": "#/components/schemas/SBTheme"
                          },
                          "maxItems": 5000,
                          "minItems": 0,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "A list of targeting clauses."
          }
        },
        "tags": [
          "Theme targeting"
        ]
      }
    },
    "/stores/assets": {
      "get": {
        "description": "For sellers or vendors, gets an array of assets associated with the specified brand entity identifier. Vendors are not required to specify a brand entity identifier, and in this case all assets associated with the vendor are returned.",
        "operationId": "listAssets",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "For sellers, this field is required. It is the Brand entity identifier of the Brand for which assets are returned. This identifier is retrieved using the [getBrands operation](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/brands). For vendors, this field is optional. If a vendor does not specify this field, all assets associated with the vendor are returned. For more information about the [difference between a seller and a vendor](https://advertising.amazon.com/resources/faq#advertising-basics), see the Amazon Ads FAQ.",
            "in": "query",
            "name": "brandEntityId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies the media types used to filter the returned array. Currently, only the `brandLogo` type is supported. If not specified, all media types are returned.",
            "in": "query",
            "name": "mediaType",
            "schema": {
              "$ref": "#/components/schemas/MediaType"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.mediaasset.v3+json": {
                "schema": {
                  "items": {
                    "properties": {
                      "assetID": {
                        "description": "The identifier of an asset associated with a store.",
                        "type": "string"
                      },
                      "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                      },
                      "name": {
                        "description": "The name of the asset.",
                        "type": "string"
                      },
                      "url": {
                        "description": "The address where the asset is stored.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success."
          }
        },
        "summary": "Gets a list of assets associated with a specified brand entity identifier.",
        "tags": [
          "Stores"
        ]
      },
      "post": {
        "description": "Image assets are stored in the Store Assets Library. Note that there may be a delay before the image is displayed in the console.",
        "operationId": "createAsset",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The name of the image file.",
            "in": "header",
            "name": "Content-Disposition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The image format type. The following table lists the valid image types:\n|Image Type|Description|\n|----------|-----------|\n|PNG|[Portable network graphics](https://en.wikipedia.org/wiki/Portable_Network_Graphics)|\n|JPEG|[JPEG](https://en.wikipedia.org/wiki/JPEG)|\n|GIF|[Graphics interchange format](https://en.wikipedia.org/wiki/GIF)|",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "asset": {
                    "description": "The binary data for the image. For more information,  File size must be smaller than 1MB, and the resolution must be a minimum of 400 pixels by 400 pixels.",
                    "format": "binary",
                    "type": "string"
                  },
                  "assetInfo": {
                    "description": "A JSON object specifying the Brand entity identifier an media type. The Brand entity identifier is optional, but media type is not.\n|Field|Type|Values|\n|-----|-----|-----|\n|brandEntityId|string|The Brand entity identifier.|\n|mediaType|string| Only `brandLogo` is currently supported.|\nExample:\n```\n{\n  brandEntityId: \"12345678\",\n  mediaType: {\n    \"brandLogo\"\n  }\n}\n```",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "assetID": {
                      "description": "ID of created asset",
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "success"
          }
        },
        "summary": "Creates a new image asset.",
        "tags": [
          "Stores"
        ]
      }
    },
    "/v2/hsa/{recordType}/report": {
      "post": {
        "description": "Use this interface to request and retrieve performance reports. **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**\n\n**KDP support**\n\nNote that KDP profiles cannot currently request reports for Sponsored Brands campaigns using the API. Authors should use the advertising console to download reporting data. \n\n**Filtering**\n\nFor more information, see the [Reporting FAQ](/API/docs/en-us/guides/reporting/v2/faq#can-i-filter-a-sponsored-brands-report).\n\n**Constraints of Sponsored Brands reporting**\n\nSponsored Brands reporting data cannot be combined with Sponsored Products data into one report. Only 14-day data is available for Sponsored Brands. Attribution windows of 1, 7, and 30-day intervals are not available.\n\n**New-to-brand performance metrics**\n\nWith new-to-brand metrics, advertisers can measure and optimize campaigns, as well as plan future marketing strategies to grow their customer base on Amazon. New-to-brand metrics determine whether an ad-attributed purchase was made by an existing customer or one buying a brand’s product on Amazon for the first time over the prior year. With new-to-brand metrics, advertisers receive campaign performance metrics such as total new-to-brand purchases and sales, new-to-brand purchase rate, and cost per new-to-brand customer. Advertisers now have the tools they need to estimate the cost of acquiring new customers on Amazon and identify the most efficient channels and tactics to achieve their campaign goals.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The type of report. Valid types are `campaigns`, `adGroups`, `ads`, `targets`, and `keywords`.",
            "in": "path",
            "name": "recordType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "creativeType": {
                    "description": "Optional. Supported values are `video` (for video campaigns) and `all` (for both non-video and video campaigns). If not specified, the report will contain data for non-video campaigns. For `ads` report types only, `creativeType` is required and must be set to `all` (`video` is not allowed). To return performance data for [multi-ad group campaigns](https://advertising.amazon.com/API/docs/en-us/sponsored-brands/3-0/openapi/prod#/Campaigns), you must include `creativeType` set to `all`` in your request.",
                    "enum": [
                      "video",
                      "all"
                    ],
                    "type": "string"
                  },
                  "metrics": {
                    "description": "Each report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/guides/reporting/v2/report-types).** ",
                    "type": "string"
                  },
                  "reportDate": {
                    "description": "Date in YYYYMMDD format. The report only contains performance data for the specified date. The time zone is specified by the profile used to request the report. If this date is today, then the performance report may contain partial information. Reports are not available for data older than 60 days. For details on data latency, see [Service Guarantees](../../reference/concepts/developer-notes).",
                    "type": "string"
                  },
                  "segment": {
                    "description": "Optional. Allows you to run a report based on secondary dimensions. Use `placement` to segment a `campaigns` report by the location on a page where your ad appears. Use `query` to segment a `keywords` report and create a search terms report.",
                    "enum": [
                      "placement",
                      "query"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "reportDate",
                  "metrics"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "recordType": {
                      "description": "The record type of the report. It can be `campaign`, `adGroup`, `keyword`, or `targets`.",
                      "type": "string"
                    },
                    "reportId": {
                      "description": "The unique ID for your requested report.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the report. Status is one of `IN_PROGRESS`, `SUCCESS`, or `FAILURE`.",
                      "type": "string"
                    },
                    "statusDetails": {
                      "description": "Description of the status.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Failed due to report date being too far in the past. Reports are not available for data older than 60 days."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Report formed incorrectly. Report requests return a 422 status code if the parameters specified are unrecognized or if the combination of parameters is not supported. In particular, the choice of `recordType` may restrict the use of certain segments. Query segmentation can only be used in combination with keyword and product ad reports."
          }
        },
        "summary": "Requests the creation of a report containing performance data related to Sponsored Brands campaigns.",
        "tags": [
          "Reports"
        ]
      }
    },
    "/v2/reports/{reportId}": {
      "get": {
        "description": "To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "Report ID returned by POST report method.",
            "in": "path",
            "name": "reportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "reportId": {
                      "description": "The unique ID for your requested report.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the report. Status is one of `IN_PROGRESS`, `SUCCESS`, or `FAILURE`.",
                      "type": "string"
                    },
                    "statusDetails": {
                      "description": "Description of the status.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Report not found."
          }
        },
        "summary": "Returns the status of a previously requested report.",
        "tags": [
          "Reports"
        ]
      }
    },
    "/v2/reports/{reportId}/download": {
      "get": {
        "description": "Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created. \n\n**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**\n\nThe report file contains one row per entity for which performance data is present. These records are represented as JSON containing the ID attribute corresponding to the `recordType`, the segment (if specified), and each of the metrics in the request.\n\n**Note**: The report files in S3 are gzipped.\n\n*Example report download*\n\n`$ curl -o /tmp/report.json.gz \"https://sandboxreports.s3.amazonaws.com/amzn1.clicksAPI.v1.m1.580149D6.c7aa92c1-ca5b-435d-bb8b-51cb26ad5731?AWSAccessKeyId=AKIAIKLHNT32USZOWVRA&amp;Expires=1476479900&amp;Signature=I%2F2Gd%2B8TbcPbXbBUM6ix%2BSVP3qA%3D\"`",
        "operationId": "downloadReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The identifier of the requested report.",
            "in": "path",
            "name": "reportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful operation.",
            "headers": {
              "Location": {
                "description": "Redirect URI with S3 file location containing report data",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found - requested resource does not exist or is not visible for the authenticated user."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too many requests - request was rate-limited. Retry later."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error - something went wrong on the server. Retry later and report an error if unresolved."
          }
        },
        "summary": "Downloads a previously requested report identified by `reportId`.",
        "tags": [
          "Reports"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://advertising-api.amazon.com"
    },
    {
      "url": "https://advertising-api-eu.amazon.com"
    },
    {
      "url": "https://advertising-api-fe.amazon.com"
    }
  ],
  "tags": [
    {
      "name": "Keywords"
    },
    {
      "name": "Negative keywords"
    },
    {
      "name": "Product targeting"
    },
    {
      "name": "Negative product targeting"
    },
    {
      "name": "Theme targeting"
    },
    {
      "name": "Targeting recommendations"
    },
    {
      "name": "Bid recommendations"
    },
    {
      "name": "Budget Rules Recommendations"
    },
    {
      "name": "Keyword Recommendations"
    },
    {
      "description": "(Not available for video campaigns)",
      "name": "Stores"
    },
    {
      "description": "(Not available for video campaigns)",
      "name": "Landing page asins"
    },
    {
      "name": "Media"
    },
    {
      "name": "Brands"
    },
    {
      "description": "(Not available for video campaigns)",
      "name": "Moderation"
    }
  ]
}